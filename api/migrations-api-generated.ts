/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FirebaseProjectList } from '../models';
// @ts-ignore
import { Migration } from '../models';
// @ts-ignore
import { MigrationList } from '../models';
// @ts-ignore
import { MigrationReport } from '../models';
// @ts-ignore
import { MigrationsCreateAppwriteMigrationRequest } from '../models';
// @ts-ignore
import { MigrationsCreateNHostMigrationRequest } from '../models';
// @ts-ignore
import { MigrationsFirebaseDataMigrationRequest } from '../models';
// @ts-ignore
import { MigrationsFirebaseOAuthMigrateRequest } from '../models';
// @ts-ignore
import { MigrationsMigrateSupabaseDataRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MigrationsApi - axios parameter creator
 * @export
 */
export const MigrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Migrate Appwrite Data
         * @param {MigrationsCreateAppwriteMigrationRequest} [migrationsCreateAppwriteMigrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppwriteMigration: async (migrationsCreateAppwriteMigrationRequest?: MigrationsCreateAppwriteMigrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migrations/appwrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: migrationsCreateAppwriteMigrationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/appwrite',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(migrationsCreateAppwriteMigrationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Migrate NHost Data
         * @param {MigrationsCreateNHostMigrationRequest} [migrationsCreateNHostMigrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNHostMigration: async (migrationsCreateNHostMigrationRequest?: MigrationsCreateNHostMigrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migrations/nhost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: migrationsCreateNHostMigrationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/nhost',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(migrationsCreateNHostMigrationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Migration
         * @param {string} migrationId Migration ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMigration: async (migrationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'migrationId' is not null or undefined
            assertParamExists('deleteMigration', 'migrationId', migrationId)
            const localVarPath = `/migrations/{migrationId}`
                .replace(`{${"migrationId"}}`, encodeURIComponent(String(migrationId !== undefined ? migrationId : `-migrationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/{migrationId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Migrate Firebase Data (Service Account)
         * @param {MigrationsFirebaseDataMigrationRequest} [migrationsFirebaseDataMigrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firebaseDataMigration: async (migrationsFirebaseDataMigrationRequest?: MigrationsFirebaseDataMigrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migrations/firebase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: migrationsFirebaseDataMigrationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/firebase',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(migrationsFirebaseDataMigrationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Migrate Firebase Data (OAuth)
         * @param {MigrationsFirebaseOAuthMigrateRequest} [migrationsFirebaseOAuthMigrateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firebaseOAuthMigrate: async (migrationsFirebaseOAuthMigrateRequest?: MigrationsFirebaseOAuthMigrateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migrations/firebase/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: migrationsFirebaseOAuthMigrateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/firebase/oauth',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(migrationsFirebaseOAuthMigrateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate a report on Firebase Data
         * @param {Array<string>} resources List of resources to migrate
         * @param {string} serviceAccount JSON of the Firebase service account credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFirebaseReport: async (resources: Array<string>, serviceAccount: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resources' is not null or undefined
            assertParamExists('generateFirebaseReport', 'resources', resources)
            // verify required parameter 'serviceAccount' is not null or undefined
            assertParamExists('generateFirebaseReport', 'serviceAccount', serviceAccount)
            const localVarPath = `/migrations/firebase/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }

            if (serviceAccount !== undefined) {
                localVarQueryParameter['serviceAccount'] = serviceAccount;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/firebase/report',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate a report on Firebase Data using OAuth
         * @param {Array<string>} resources List of resources to migrate
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFirebaseReportOAuth: async (resources: Array<string>, projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resources' is not null or undefined
            assertParamExists('generateFirebaseReportOAuth', 'resources', resources)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('generateFirebaseReportOAuth', 'projectId', projectId)
            const localVarPath = `/migrations/firebase/report/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/firebase/report/oauth',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate a report on NHost Data
         * @param {Array<string>} resources List of resources to migrate.
         * @param {string} subdomain Source\&#39;s Subdomain.
         * @param {string} region Source\&#39;s Region.
         * @param {string} adminSecret Source\&#39;s Admin Secret.
         * @param {string} database Source\&#39;s Database Name.
         * @param {string} username Source\&#39;s Database Username.
         * @param {string} password Source\&#39;s Database Password.
         * @param {number} [port] Source\&#39;s Database Port.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNhostReport: async (resources: Array<string>, subdomain: string, region: string, adminSecret: string, database: string, username: string, password: string, port?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resources' is not null or undefined
            assertParamExists('generateNhostReport', 'resources', resources)
            // verify required parameter 'subdomain' is not null or undefined
            assertParamExists('generateNhostReport', 'subdomain', subdomain)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('generateNhostReport', 'region', region)
            // verify required parameter 'adminSecret' is not null or undefined
            assertParamExists('generateNhostReport', 'adminSecret', adminSecret)
            // verify required parameter 'database' is not null or undefined
            assertParamExists('generateNhostReport', 'database', database)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('generateNhostReport', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('generateNhostReport', 'password', password)
            const localVarPath = `/migrations/nhost/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }

            if (subdomain !== undefined) {
                localVarQueryParameter['subdomain'] = subdomain;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (adminSecret !== undefined) {
                localVarQueryParameter['adminSecret'] = adminSecret;
            }

            if (database !== undefined) {
                localVarQueryParameter['database'] = database;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (port !== undefined) {
                localVarQueryParameter['port'] = port;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/nhost/report',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate a report on Appwrite Data
         * @param {Array<string>} resources List of resources to migrate
         * @param {string} endpoint Source\&#39;s Appwrite Endpoint
         * @param {string} projectID Source\&#39;s Project ID
         * @param {string} key Source\&#39;s API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReportOnAppwriteData: async (resources: Array<string>, endpoint: string, projectID: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resources' is not null or undefined
            assertParamExists('generateReportOnAppwriteData', 'resources', resources)
            // verify required parameter 'endpoint' is not null or undefined
            assertParamExists('generateReportOnAppwriteData', 'endpoint', endpoint)
            // verify required parameter 'projectID' is not null or undefined
            assertParamExists('generateReportOnAppwriteData', 'projectID', projectID)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('generateReportOnAppwriteData', 'key', key)
            const localVarPath = `/migrations/appwrite/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }

            if (projectID !== undefined) {
                localVarQueryParameter['projectID'] = projectID;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/appwrite/report',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate a report on Supabase Data
         * @param {Array<string>} resources List of resources to migrate
         * @param {string} endpoint Source\&#39;s Supabase Endpoint.
         * @param {string} apiKey Source\&#39;s API Key.
         * @param {string} databaseHost Source\&#39;s Database Host.
         * @param {string} username Source\&#39;s Database Username.
         * @param {string} password Source\&#39;s Database Password.
         * @param {number} [port] Source\&#39;s Database Port.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSupabaseReport: async (resources: Array<string>, endpoint: string, apiKey: string, databaseHost: string, username: string, password: string, port?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resources' is not null or undefined
            assertParamExists('generateSupabaseReport', 'resources', resources)
            // verify required parameter 'endpoint' is not null or undefined
            assertParamExists('generateSupabaseReport', 'endpoint', endpoint)
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('generateSupabaseReport', 'apiKey', apiKey)
            // verify required parameter 'databaseHost' is not null or undefined
            assertParamExists('generateSupabaseReport', 'databaseHost', databaseHost)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('generateSupabaseReport', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('generateSupabaseReport', 'password', password)
            const localVarPath = `/migrations/supabase/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['apiKey'] = apiKey;
            }

            if (databaseHost !== undefined) {
                localVarQueryParameter['databaseHost'] = databaseHost;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (port !== undefined) {
                localVarQueryParameter['port'] = port;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/supabase/report',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Migration
         * @param {string} migrationId Migration unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (migrationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'migrationId' is not null or undefined
            assertParamExists('getById', 'migrationId', migrationId)
            const localVarPath = `/migrations/{migrationId}`
                .replace(`{${"migrationId"}}`, encodeURIComponent(String(migrationId !== undefined ? migrationId : `-migrationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/{migrationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Firebase Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFirebaseProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migrations/firebase/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/firebase/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Migrations
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/databases#querying-documents). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: status, stage, source, resources, statusCounters, resourceData, errors
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMigrations: async (queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Migrate Supabase Data
         * @param {MigrationsMigrateSupabaseDataRequest} [migrationsMigrateSupabaseDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateSupabaseData: async (migrationsMigrateSupabaseDataRequest?: MigrationsMigrateSupabaseDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migrations/supabase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: migrationsMigrateSupabaseDataRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/supabase',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(migrationsMigrateSupabaseDataRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retry Migration
         * @param {string} migrationId Migration unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryMigration: async (migrationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'migrationId' is not null or undefined
            assertParamExists('retryMigration', 'migrationId', migrationId)
            const localVarPath = `/migrations/{migrationId}`
                .replace(`{${"migrationId"}}`, encodeURIComponent(String(migrationId !== undefined ? migrationId : `-migrationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/{migrationId}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revoke Appwrite\'s authorization to access Firebase Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeFirebaseAuthorization: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migrations/firebase/deauthorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/migrations/firebase/deauthorize',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MigrationsApi - functional programming interface
 * @export
 */
export const MigrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MigrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Migrate Appwrite Data
         * @param {MigrationsApiCreateAppwriteMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppwriteMigration(requestParameters: MigrationsApiCreateAppwriteMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Migration>> {
            const migrationsCreateAppwriteMigrationRequest: MigrationsCreateAppwriteMigrationRequest = {
                resources: requestParameters.resources,
                endpoint: requestParameters.endpoint,
                projectId: requestParameters.projectId,
                apiKey: requestParameters.apiKey
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppwriteMigration(migrationsCreateAppwriteMigrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Migrate NHost Data
         * @param {MigrationsApiCreateNHostMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNHostMigration(requestParameters: MigrationsApiCreateNHostMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Migration>> {
            const migrationsCreateNHostMigrationRequest: MigrationsCreateNHostMigrationRequest = {
                resources: requestParameters.resources,
                subdomain: requestParameters.subdomain,
                region: requestParameters.region,
                adminSecret: requestParameters.adminSecret,
                database: requestParameters.database,
                username: requestParameters.username,
                password: requestParameters.password,
                port: requestParameters.port
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNHostMigration(migrationsCreateNHostMigrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Migration
         * @param {MigrationsApiDeleteMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMigration(requestParameters: MigrationsApiDeleteMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMigration(requestParameters.migrationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Migrate Firebase Data (Service Account)
         * @param {MigrationsApiFirebaseDataMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firebaseDataMigration(requestParameters: MigrationsApiFirebaseDataMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Migration>> {
            const migrationsFirebaseDataMigrationRequest: MigrationsFirebaseDataMigrationRequest = {
                resources: requestParameters.resources,
                serviceAccount: requestParameters.serviceAccount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.firebaseDataMigration(migrationsFirebaseDataMigrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Migrate Firebase Data (OAuth)
         * @param {MigrationsApiFirebaseOAuthMigrateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firebaseOAuthMigrate(requestParameters: MigrationsApiFirebaseOAuthMigrateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Migration>> {
            const migrationsFirebaseOAuthMigrateRequest: MigrationsFirebaseOAuthMigrateRequest = {
                resources: requestParameters.resources,
                projectId: requestParameters.projectId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.firebaseOAuthMigrate(migrationsFirebaseOAuthMigrateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate a report on Firebase Data
         * @param {MigrationsApiGenerateFirebaseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateFirebaseReport(requestParameters: MigrationsApiGenerateFirebaseReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrationReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateFirebaseReport(requestParameters.resources, requestParameters.serviceAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate a report on Firebase Data using OAuth
         * @param {MigrationsApiGenerateFirebaseReportOAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateFirebaseReportOAuth(requestParameters: MigrationsApiGenerateFirebaseReportOAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrationReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateFirebaseReportOAuth(requestParameters.resources, requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate a report on NHost Data
         * @param {MigrationsApiGenerateNhostReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateNhostReport(requestParameters: MigrationsApiGenerateNhostReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrationReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateNhostReport(requestParameters.resources, requestParameters.subdomain, requestParameters.region, requestParameters.adminSecret, requestParameters.database, requestParameters.username, requestParameters.password, requestParameters.port, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate a report on Appwrite Data
         * @param {MigrationsApiGenerateReportOnAppwriteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateReportOnAppwriteData(requestParameters: MigrationsApiGenerateReportOnAppwriteDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrationReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateReportOnAppwriteData(requestParameters.resources, requestParameters.endpoint, requestParameters.projectID, requestParameters.key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate a report on Supabase Data
         * @param {MigrationsApiGenerateSupabaseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSupabaseReport(requestParameters: MigrationsApiGenerateSupabaseReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrationReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateSupabaseReport(requestParameters.resources, requestParameters.endpoint, requestParameters.apiKey, requestParameters.databaseHost, requestParameters.username, requestParameters.password, requestParameters.port, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Migration
         * @param {MigrationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: MigrationsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Migration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.migrationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Firebase Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFirebaseProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirebaseProjectList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFirebaseProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Migrations
         * @param {MigrationsApiListMigrationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMigrations(requestParameters: MigrationsApiListMigrationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMigrations(requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Migrate Supabase Data
         * @param {MigrationsApiMigrateSupabaseDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async migrateSupabaseData(requestParameters: MigrationsApiMigrateSupabaseDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Migration>> {
            const migrationsMigrateSupabaseDataRequest: MigrationsMigrateSupabaseDataRequest = {
                resources: requestParameters.resources,
                endpoint: requestParameters.endpoint,
                apiKey: requestParameters.apiKey,
                databaseHost: requestParameters.databaseHost,
                username: requestParameters.username,
                password: requestParameters.password,
                port: requestParameters.port
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.migrateSupabaseData(migrationsMigrateSupabaseDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retry Migration
         * @param {MigrationsApiRetryMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retryMigration(requestParameters: MigrationsApiRetryMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Migration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retryMigration(requestParameters.migrationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revoke Appwrite\'s authorization to access Firebase Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeFirebaseAuthorization(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeFirebaseAuthorization(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MigrationsApi - factory interface
 * @export
 */
export const MigrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MigrationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Migrate Appwrite Data
         * @param {MigrationsApiCreateAppwriteMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppwriteMigration(requestParameters: MigrationsApiCreateAppwriteMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<Migration> {
            return localVarFp.createAppwriteMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Migrate NHost Data
         * @param {MigrationsApiCreateNHostMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNHostMigration(requestParameters: MigrationsApiCreateNHostMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<Migration> {
            return localVarFp.createNHostMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Migration
         * @param {MigrationsApiDeleteMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMigration(requestParameters: MigrationsApiDeleteMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Migrate Firebase Data (Service Account)
         * @param {MigrationsApiFirebaseDataMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firebaseDataMigration(requestParameters: MigrationsApiFirebaseDataMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<Migration> {
            return localVarFp.firebaseDataMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Migrate Firebase Data (OAuth)
         * @param {MigrationsApiFirebaseOAuthMigrateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firebaseOAuthMigrate(requestParameters: MigrationsApiFirebaseOAuthMigrateRequest, options?: AxiosRequestConfig): AxiosPromise<Migration> {
            return localVarFp.firebaseOAuthMigrate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate a report on Firebase Data
         * @param {MigrationsApiGenerateFirebaseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFirebaseReport(requestParameters: MigrationsApiGenerateFirebaseReportRequest, options?: AxiosRequestConfig): AxiosPromise<MigrationReport> {
            return localVarFp.generateFirebaseReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate a report on Firebase Data using OAuth
         * @param {MigrationsApiGenerateFirebaseReportOAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFirebaseReportOAuth(requestParameters: MigrationsApiGenerateFirebaseReportOAuthRequest, options?: AxiosRequestConfig): AxiosPromise<MigrationReport> {
            return localVarFp.generateFirebaseReportOAuth(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate a report on NHost Data
         * @param {MigrationsApiGenerateNhostReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNhostReport(requestParameters: MigrationsApiGenerateNhostReportRequest, options?: AxiosRequestConfig): AxiosPromise<MigrationReport> {
            return localVarFp.generateNhostReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate a report on Appwrite Data
         * @param {MigrationsApiGenerateReportOnAppwriteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReportOnAppwriteData(requestParameters: MigrationsApiGenerateReportOnAppwriteDataRequest, options?: AxiosRequestConfig): AxiosPromise<MigrationReport> {
            return localVarFp.generateReportOnAppwriteData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate a report on Supabase Data
         * @param {MigrationsApiGenerateSupabaseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSupabaseReport(requestParameters: MigrationsApiGenerateSupabaseReportRequest, options?: AxiosRequestConfig): AxiosPromise<MigrationReport> {
            return localVarFp.generateSupabaseReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Migration
         * @param {MigrationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: MigrationsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Migration> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Firebase Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFirebaseProjects(options?: AxiosRequestConfig): AxiosPromise<FirebaseProjectList> {
            return localVarFp.listFirebaseProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Migrations
         * @param {MigrationsApiListMigrationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMigrations(requestParameters: MigrationsApiListMigrationsRequest, options?: AxiosRequestConfig): AxiosPromise<MigrationList> {
            return localVarFp.listMigrations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Migrate Supabase Data
         * @param {MigrationsApiMigrateSupabaseDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateSupabaseData(requestParameters: MigrationsApiMigrateSupabaseDataRequest, options?: AxiosRequestConfig): AxiosPromise<Migration> {
            return localVarFp.migrateSupabaseData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retry Migration
         * @param {MigrationsApiRetryMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryMigration(requestParameters: MigrationsApiRetryMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<Migration> {
            return localVarFp.retryMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revoke Appwrite\'s authorization to access Firebase Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeFirebaseAuthorization(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.revokeFirebaseAuthorization(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAppwriteMigration operation in MigrationsApi.
 * @export
 * @interface MigrationsApiCreateAppwriteMigrationRequest
 */
export type MigrationsApiCreateAppwriteMigrationRequest = {
    
} & MigrationsCreateAppwriteMigrationRequest

/**
 * Request parameters for createNHostMigration operation in MigrationsApi.
 * @export
 * @interface MigrationsApiCreateNHostMigrationRequest
 */
export type MigrationsApiCreateNHostMigrationRequest = {
    
} & MigrationsCreateNHostMigrationRequest

/**
 * Request parameters for deleteMigration operation in MigrationsApi.
 * @export
 * @interface MigrationsApiDeleteMigrationRequest
 */
export type MigrationsApiDeleteMigrationRequest = {
    
    /**
    * Migration ID.
    * @type {string}
    * @memberof MigrationsApiDeleteMigration
    */
    readonly migrationId: string
    
}

/**
 * Request parameters for firebaseDataMigration operation in MigrationsApi.
 * @export
 * @interface MigrationsApiFirebaseDataMigrationRequest
 */
export type MigrationsApiFirebaseDataMigrationRequest = {
    
} & MigrationsFirebaseDataMigrationRequest

/**
 * Request parameters for firebaseOAuthMigrate operation in MigrationsApi.
 * @export
 * @interface MigrationsApiFirebaseOAuthMigrateRequest
 */
export type MigrationsApiFirebaseOAuthMigrateRequest = {
    
} & MigrationsFirebaseOAuthMigrateRequest

/**
 * Request parameters for generateFirebaseReport operation in MigrationsApi.
 * @export
 * @interface MigrationsApiGenerateFirebaseReportRequest
 */
export type MigrationsApiGenerateFirebaseReportRequest = {
    
    /**
    * List of resources to migrate
    * @type {Array<string>}
    * @memberof MigrationsApiGenerateFirebaseReport
    */
    readonly resources: Array<string>
    
    /**
    * JSON of the Firebase service account credentials
    * @type {string}
    * @memberof MigrationsApiGenerateFirebaseReport
    */
    readonly serviceAccount: string
    
}

/**
 * Request parameters for generateFirebaseReportOAuth operation in MigrationsApi.
 * @export
 * @interface MigrationsApiGenerateFirebaseReportOAuthRequest
 */
export type MigrationsApiGenerateFirebaseReportOAuthRequest = {
    
    /**
    * List of resources to migrate
    * @type {Array<string>}
    * @memberof MigrationsApiGenerateFirebaseReportOAuth
    */
    readonly resources: Array<string>
    
    /**
    * Project ID
    * @type {string}
    * @memberof MigrationsApiGenerateFirebaseReportOAuth
    */
    readonly projectId: string
    
}

/**
 * Request parameters for generateNhostReport operation in MigrationsApi.
 * @export
 * @interface MigrationsApiGenerateNhostReportRequest
 */
export type MigrationsApiGenerateNhostReportRequest = {
    
    /**
    * List of resources to migrate.
    * @type {Array<string>}
    * @memberof MigrationsApiGenerateNhostReport
    */
    readonly resources: Array<string>
    
    /**
    * Source\'s Subdomain.
    * @type {string}
    * @memberof MigrationsApiGenerateNhostReport
    */
    readonly subdomain: string
    
    /**
    * Source\'s Region.
    * @type {string}
    * @memberof MigrationsApiGenerateNhostReport
    */
    readonly region: string
    
    /**
    * Source\'s Admin Secret.
    * @type {string}
    * @memberof MigrationsApiGenerateNhostReport
    */
    readonly adminSecret: string
    
    /**
    * Source\'s Database Name.
    * @type {string}
    * @memberof MigrationsApiGenerateNhostReport
    */
    readonly database: string
    
    /**
    * Source\'s Database Username.
    * @type {string}
    * @memberof MigrationsApiGenerateNhostReport
    */
    readonly username: string
    
    /**
    * Source\'s Database Password.
    * @type {string}
    * @memberof MigrationsApiGenerateNhostReport
    */
    readonly password: string
    
    /**
    * Source\'s Database Port.
    * @type {number}
    * @memberof MigrationsApiGenerateNhostReport
    */
    readonly port?: number
    
}

/**
 * Request parameters for generateReportOnAppwriteData operation in MigrationsApi.
 * @export
 * @interface MigrationsApiGenerateReportOnAppwriteDataRequest
 */
export type MigrationsApiGenerateReportOnAppwriteDataRequest = {
    
    /**
    * List of resources to migrate
    * @type {Array<string>}
    * @memberof MigrationsApiGenerateReportOnAppwriteData
    */
    readonly resources: Array<string>
    
    /**
    * Source\'s Appwrite Endpoint
    * @type {string}
    * @memberof MigrationsApiGenerateReportOnAppwriteData
    */
    readonly endpoint: string
    
    /**
    * Source\'s Project ID
    * @type {string}
    * @memberof MigrationsApiGenerateReportOnAppwriteData
    */
    readonly projectID: string
    
    /**
    * Source\'s API Key
    * @type {string}
    * @memberof MigrationsApiGenerateReportOnAppwriteData
    */
    readonly key: string
    
}

/**
 * Request parameters for generateSupabaseReport operation in MigrationsApi.
 * @export
 * @interface MigrationsApiGenerateSupabaseReportRequest
 */
export type MigrationsApiGenerateSupabaseReportRequest = {
    
    /**
    * List of resources to migrate
    * @type {Array<string>}
    * @memberof MigrationsApiGenerateSupabaseReport
    */
    readonly resources: Array<string>
    
    /**
    * Source\'s Supabase Endpoint.
    * @type {string}
    * @memberof MigrationsApiGenerateSupabaseReport
    */
    readonly endpoint: string
    
    /**
    * Source\'s API Key.
    * @type {string}
    * @memberof MigrationsApiGenerateSupabaseReport
    */
    readonly apiKey: string
    
    /**
    * Source\'s Database Host.
    * @type {string}
    * @memberof MigrationsApiGenerateSupabaseReport
    */
    readonly databaseHost: string
    
    /**
    * Source\'s Database Username.
    * @type {string}
    * @memberof MigrationsApiGenerateSupabaseReport
    */
    readonly username: string
    
    /**
    * Source\'s Database Password.
    * @type {string}
    * @memberof MigrationsApiGenerateSupabaseReport
    */
    readonly password: string
    
    /**
    * Source\'s Database Port.
    * @type {number}
    * @memberof MigrationsApiGenerateSupabaseReport
    */
    readonly port?: number
    
}

/**
 * Request parameters for getById operation in MigrationsApi.
 * @export
 * @interface MigrationsApiGetByIdRequest
 */
export type MigrationsApiGetByIdRequest = {
    
    /**
    * Migration unique ID.
    * @type {string}
    * @memberof MigrationsApiGetById
    */
    readonly migrationId: string
    
}

/**
 * Request parameters for listMigrations operation in MigrationsApi.
 * @export
 * @interface MigrationsApiListMigrationsRequest
 */
export type MigrationsApiListMigrationsRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/databases#querying-documents). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: status, stage, source, resources, statusCounters, resourceData, errors
    * @type {Array<string>}
    * @memberof MigrationsApiListMigrations
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof MigrationsApiListMigrations
    */
    readonly search?: string
    
}

/**
 * Request parameters for migrateSupabaseData operation in MigrationsApi.
 * @export
 * @interface MigrationsApiMigrateSupabaseDataRequest
 */
export type MigrationsApiMigrateSupabaseDataRequest = {
    
} & MigrationsMigrateSupabaseDataRequest

/**
 * Request parameters for retryMigration operation in MigrationsApi.
 * @export
 * @interface MigrationsApiRetryMigrationRequest
 */
export type MigrationsApiRetryMigrationRequest = {
    
    /**
    * Migration unique ID.
    * @type {string}
    * @memberof MigrationsApiRetryMigration
    */
    readonly migrationId: string
    
}

/**
 * MigrationsApiGenerated - object-oriented interface
 * @export
 * @class MigrationsApiGenerated
 * @extends {BaseAPI}
 */
export class MigrationsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Migrate Appwrite Data
     * @param {MigrationsApiCreateAppwriteMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public createAppwriteMigration(requestParameters: MigrationsApiCreateAppwriteMigrationRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).createAppwriteMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Migrate NHost Data
     * @param {MigrationsApiCreateNHostMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public createNHostMigration(requestParameters: MigrationsApiCreateNHostMigrationRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).createNHostMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Migration
     * @param {MigrationsApiDeleteMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public deleteMigration(requestParameters: MigrationsApiDeleteMigrationRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).deleteMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Migrate Firebase Data (Service Account)
     * @param {MigrationsApiFirebaseDataMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public firebaseDataMigration(requestParameters: MigrationsApiFirebaseDataMigrationRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).firebaseDataMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Migrate Firebase Data (OAuth)
     * @param {MigrationsApiFirebaseOAuthMigrateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public firebaseOAuthMigrate(requestParameters: MigrationsApiFirebaseOAuthMigrateRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).firebaseOAuthMigrate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate a report on Firebase Data
     * @param {MigrationsApiGenerateFirebaseReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public generateFirebaseReport(requestParameters: MigrationsApiGenerateFirebaseReportRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).generateFirebaseReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate a report on Firebase Data using OAuth
     * @param {MigrationsApiGenerateFirebaseReportOAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public generateFirebaseReportOAuth(requestParameters: MigrationsApiGenerateFirebaseReportOAuthRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).generateFirebaseReportOAuth(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate a report on NHost Data
     * @param {MigrationsApiGenerateNhostReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public generateNhostReport(requestParameters: MigrationsApiGenerateNhostReportRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).generateNhostReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate a report on Appwrite Data
     * @param {MigrationsApiGenerateReportOnAppwriteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public generateReportOnAppwriteData(requestParameters: MigrationsApiGenerateReportOnAppwriteDataRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).generateReportOnAppwriteData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate a report on Supabase Data
     * @param {MigrationsApiGenerateSupabaseReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public generateSupabaseReport(requestParameters: MigrationsApiGenerateSupabaseReportRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).generateSupabaseReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Migration
     * @param {MigrationsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public getById(requestParameters: MigrationsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Firebase Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public listFirebaseProjects(options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).listFirebaseProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Migrations
     * @param {MigrationsApiListMigrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public listMigrations(requestParameters: MigrationsApiListMigrationsRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).listMigrations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Migrate Supabase Data
     * @param {MigrationsApiMigrateSupabaseDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public migrateSupabaseData(requestParameters: MigrationsApiMigrateSupabaseDataRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).migrateSupabaseData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retry Migration
     * @param {MigrationsApiRetryMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public retryMigration(requestParameters: MigrationsApiRetryMigrationRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).retryMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revoke Appwrite\'s authorization to access Firebase Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public revokeFirebaseAuthorization(options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).revokeFirebaseAuthorization(options).then((request) => request(this.axios, this.basePath));
    }
}
