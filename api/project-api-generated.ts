/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectCreateVariableRequest } from '../models';
// @ts-ignore
import { ProjectUpdateVariableByIdRequest } from '../models';
// @ts-ignore
import { UsageProject } from '../models';
// @ts-ignore
import { Variable } from '../models';
// @ts-ignore
import { VariableList } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new project variable. This variable will be accessible in all Appwrite Functions at runtime.
         * @summary Create Variable
         * @param {ProjectCreateVariableRequest} [projectCreateVariableRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariable: async (projectCreateVariableRequest?: ProjectCreateVariableRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectCreateVariableRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/variables',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateVariableRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a project variable by its unique ID. 
         * @summary Delete Variable
         * @param {string} variableId Variable unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableById: async (variableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('deleteVariableById', 'variableId', variableId)
            const localVarPath = `/project/variables/{variableId}`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId !== undefined ? variableId : `-variableId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/variables/{variableId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project usage stats
         * @param {string} startDate Starting date for the usage
         * @param {string} endDate End date for the usage
         * @param {'1h' | '1d'} [period] Period used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageStats: async (startDate: string, endDate: string, period?: '1h' | '1d', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getUsageStats', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getUsageStats', 'endDate', endDate)
            const localVarPath = `/project/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/usage',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all project variables. These variables will be accessible in all Appwrite Functions at runtime.
         * @summary List Variables
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariables: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/variables',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update project variable by its unique ID. This variable will be accessible in all Appwrite Functions at runtime.
         * @summary Update Variable
         * @param {string} variableId Variable unique ID.
         * @param {ProjectUpdateVariableByIdRequest} [projectUpdateVariableByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariableById: async (variableId: string, projectUpdateVariableByIdRequest?: ProjectUpdateVariableByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('updateVariableById', 'variableId', variableId)
            const localVarPath = `/project/variables/{variableId}`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId !== undefined ? variableId : `-variableId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectUpdateVariableByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/variables/{variableId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectUpdateVariableByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a project variable by its unique ID.
         * @summary Get Variable
         * @param {string} variableId Variable unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableDetails: async (variableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('variableDetails', 'variableId', variableId)
            const localVarPath = `/project/variables/{variableId}`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId !== undefined ? variableId : `-variableId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/variables/{variableId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new project variable. This variable will be accessible in all Appwrite Functions at runtime.
         * @summary Create Variable
         * @param {ProjectApiCreateVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVariable(requestParameters: ProjectApiCreateVariableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Variable>> {
            const projectCreateVariableRequest: ProjectCreateVariableRequest = {
                key: requestParameters.key,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVariable(projectCreateVariableRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a project variable by its unique ID. 
         * @summary Delete Variable
         * @param {ProjectApiDeleteVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariableById(requestParameters: ProjectApiDeleteVariableByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVariableById(requestParameters.variableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get project usage stats
         * @param {ProjectApiGetUsageStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageStats(requestParameters: ProjectApiGetUsageStatsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsageProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsageStats(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all project variables. These variables will be accessible in all Appwrite Functions at runtime.
         * @summary List Variables
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariables(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariables(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update project variable by its unique ID. This variable will be accessible in all Appwrite Functions at runtime.
         * @summary Update Variable
         * @param {ProjectApiUpdateVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVariableById(requestParameters: ProjectApiUpdateVariableByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Variable>> {
            const projectUpdateVariableByIdRequest: ProjectUpdateVariableByIdRequest = {
                key: requestParameters.key,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVariableById(requestParameters.variableId, projectUpdateVariableByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a project variable by its unique ID.
         * @summary Get Variable
         * @param {ProjectApiVariableDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async variableDetails(requestParameters: ProjectApiVariableDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Variable>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.variableDetails(requestParameters.variableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Create a new project variable. This variable will be accessible in all Appwrite Functions at runtime.
         * @summary Create Variable
         * @param {ProjectApiCreateVariableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariable(requestParameters: ProjectApiCreateVariableRequest, options?: AxiosRequestConfig): AxiosPromise<Variable> {
            return localVarFp.createVariable(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a project variable by its unique ID. 
         * @summary Delete Variable
         * @param {ProjectApiDeleteVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableById(requestParameters: ProjectApiDeleteVariableByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVariableById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project usage stats
         * @param {ProjectApiGetUsageStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageStats(requestParameters: ProjectApiGetUsageStatsRequest, options?: AxiosRequestConfig): AxiosPromise<UsageProject> {
            return localVarFp.getUsageStats(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all project variables. These variables will be accessible in all Appwrite Functions at runtime.
         * @summary List Variables
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariables(options?: AxiosRequestConfig): AxiosPromise<VariableList> {
            return localVarFp.listVariables(options).then((request) => request(axios, basePath));
        },
        /**
         * Update project variable by its unique ID. This variable will be accessible in all Appwrite Functions at runtime.
         * @summary Update Variable
         * @param {ProjectApiUpdateVariableByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariableById(requestParameters: ProjectApiUpdateVariableByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Variable> {
            return localVarFp.updateVariableById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a project variable by its unique ID.
         * @summary Get Variable
         * @param {ProjectApiVariableDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableDetails(requestParameters: ProjectApiVariableDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Variable> {
            return localVarFp.variableDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVariable operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateVariableRequest
 */
export type ProjectApiCreateVariableRequest = {
    
} & ProjectCreateVariableRequest

/**
 * Request parameters for deleteVariableById operation in ProjectApi.
 * @export
 * @interface ProjectApiDeleteVariableByIdRequest
 */
export type ProjectApiDeleteVariableByIdRequest = {
    
    /**
    * Variable unique ID.
    * @type {string}
    * @memberof ProjectApiDeleteVariableById
    */
    readonly variableId: string
    
}

/**
 * Request parameters for getUsageStats operation in ProjectApi.
 * @export
 * @interface ProjectApiGetUsageStatsRequest
 */
export type ProjectApiGetUsageStatsRequest = {
    
    /**
    * Starting date for the usage
    * @type {string}
    * @memberof ProjectApiGetUsageStats
    */
    readonly startDate: string
    
    /**
    * End date for the usage
    * @type {string}
    * @memberof ProjectApiGetUsageStats
    */
    readonly endDate: string
    
    /**
    * Period used
    * @type {'1h' | '1d'}
    * @memberof ProjectApiGetUsageStats
    */
    readonly period?: '1h' | '1d'
    
}

/**
 * Request parameters for updateVariableById operation in ProjectApi.
 * @export
 * @interface ProjectApiUpdateVariableByIdRequest
 */
export type ProjectApiUpdateVariableByIdRequest = {
    
    /**
    * Variable unique ID.
    * @type {string}
    * @memberof ProjectApiUpdateVariableById
    */
    readonly variableId: string
    
} & ProjectUpdateVariableByIdRequest

/**
 * Request parameters for variableDetails operation in ProjectApi.
 * @export
 * @interface ProjectApiVariableDetailsRequest
 */
export type ProjectApiVariableDetailsRequest = {
    
    /**
    * Variable unique ID.
    * @type {string}
    * @memberof ProjectApiVariableDetails
    */
    readonly variableId: string
    
}

/**
 * ProjectApiGenerated - object-oriented interface
 * @export
 * @class ProjectApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectApiGenerated extends BaseAPI {
    /**
     * Create a new project variable. This variable will be accessible in all Appwrite Functions at runtime.
     * @summary Create Variable
     * @param {ProjectApiCreateVariableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public createVariable(requestParameters: ProjectApiCreateVariableRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createVariable(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a project variable by its unique ID. 
     * @summary Delete Variable
     * @param {ProjectApiDeleteVariableByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public deleteVariableById(requestParameters: ProjectApiDeleteVariableByIdRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).deleteVariableById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project usage stats
     * @param {ProjectApiGetUsageStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public getUsageStats(requestParameters: ProjectApiGetUsageStatsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getUsageStats(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all project variables. These variables will be accessible in all Appwrite Functions at runtime.
     * @summary List Variables
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public listVariables(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listVariables(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update project variable by its unique ID. This variable will be accessible in all Appwrite Functions at runtime.
     * @summary Update Variable
     * @param {ProjectApiUpdateVariableByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public updateVariableById(requestParameters: ProjectApiUpdateVariableByIdRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).updateVariableById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a project variable by its unique ID.
     * @summary Get Variable
     * @param {ProjectApiVariableDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public variableDetails(requestParameters: ProjectApiVariableDetailsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).variableDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
