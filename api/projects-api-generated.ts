/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmailTemplate } from '../models';
// @ts-ignore
import { Key } from '../models';
// @ts-ignore
import { KeyList } from '../models';
// @ts-ignore
import { Platform } from '../models';
// @ts-ignore
import { PlatformList } from '../models';
// @ts-ignore
import { Project } from '../models';
// @ts-ignore
import { ProjectList } from '../models';
// @ts-ignore
import { ProjectsCreateKeyRequest } from '../models';
// @ts-ignore
import { ProjectsCreateNewProjectRequest } from '../models';
// @ts-ignore
import { ProjectsCreatePlatformRequest } from '../models';
// @ts-ignore
import { ProjectsCreateSmtpTestRequest } from '../models';
// @ts-ignore
import { ProjectsCreateWebhookRequest } from '../models';
// @ts-ignore
import { ProjectsEnablePersonalDataCheckRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateAllApiStatusRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateAllServiceStatusRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateApiStatusRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateAuthDurationRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateAuthMethodStatusRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateAuthPasswordDictionaryRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateAuthPasswordHistoryRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateCustomEmailTemplatesRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateDetailRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateKeyRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateMaxSessionsLimitRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateOAuthRequest } from '../models';
// @ts-ignore
import { ProjectsUpdatePlatformByIdRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateServiceStatusRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateSmsTemplateRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateSmtpRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateTeamRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateUserLimitRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateWebhookRequest } from '../models';
// @ts-ignore
import { SmsTemplate } from '../models';
// @ts-ignore
import { Webhook } from '../models';
// @ts-ignore
import { WebhookList } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create key
         * @param {string} projectId Project unique ID.
         * @param {ProjectsCreateKeyRequest} [projectsCreateKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKey: async (projectId: string, projectsCreateKeyRequest?: ProjectsCreateKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createKey', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/keys`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsCreateKeyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/keys',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsCreateKeyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create project
         * @param {ProjectsCreateNewProjectRequest} [projectsCreateNewProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewProject: async (projectsCreateNewProjectRequest?: ProjectsCreateNewProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsCreateNewProjectRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsCreateNewProjectRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create platform
         * @param {string} projectId Project unique ID.
         * @param {ProjectsCreatePlatformRequest} [projectsCreatePlatformRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlatform: async (projectId: string, projectsCreatePlatformRequest?: ProjectsCreatePlatformRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createPlatform', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/platforms`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsCreatePlatformRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/platforms',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsCreatePlatformRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create SMTP test
         * @param {string} projectId Project unique ID.
         * @param {ProjectsCreateSmtpTestRequest} [projectsCreateSmtpTestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSmtpTest: async (projectId: string, projectsCreateSmtpTestRequest?: ProjectsCreateSmtpTestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createSmtpTest', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/smtp/tests`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsCreateSmtpTestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/smtp/tests',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsCreateSmtpTestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create webhook
         * @param {string} projectId Project unique ID.
         * @param {ProjectsCreateWebhookRequest} [projectsCreateWebhookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhook: async (projectId: string, projectsCreateWebhookRequest?: ProjectsCreateWebhookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createWebhook', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/webhooks`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsCreateWebhookRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/webhooks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsCreateWebhookRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete key
         * @param {string} projectId Project unique ID.
         * @param {string} keyId Key unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKey: async (projectId: string, keyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteKey', 'projectId', projectId)
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('deleteKey', 'keyId', keyId)
            const localVarPath = `/projects/{projectId}/keys/{keyId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId !== undefined ? keyId : `-keyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/keys/{keyId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete platform
         * @param {string} projectId Project unique ID.
         * @param {string} platformId Platform unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlatform: async (projectId: string, platformId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deletePlatform', 'projectId', projectId)
            // verify required parameter 'platformId' is not null or undefined
            assertParamExists('deletePlatform', 'platformId', platformId)
            const localVarPath = `/projects/{projectId}/platforms/{platformId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"platformId"}}`, encodeURIComponent(String(platformId !== undefined ? platformId : `-platformId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/platforms/{platformId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete webhook
         * @param {string} projectId Project unique ID.
         * @param {string} webhookId Webhook unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: async (projectId: string, webhookId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteWebhook', 'projectId', projectId)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('deleteWebhook', 'webhookId', webhookId)
            const localVarPath = `/projects/{projectId}/webhooks/{webhookId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhookId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/webhooks/{webhookId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable or disable checking user passwords for similarity with their personal data.
         * @param {string} projectId Project unique ID.
         * @param {ProjectsEnablePersonalDataCheckRequest} [projectsEnablePersonalDataCheckRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePersonalDataCheck: async (projectId: string, projectsEnablePersonalDataCheckRequest?: ProjectsEnablePersonalDataCheckRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('enablePersonalDataCheck', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/auth/personal-data`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsEnablePersonalDataCheckRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/auth/personal-data',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsEnablePersonalDataCheckRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project
         * @param {string} projectId Project unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('get', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get custom email template
         * @param {string} projectId Project unique ID.
         * @param {'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'} type Template type
         * @param {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'} locale Template locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate: async (projectId: string, type: 'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge', locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getEmailTemplate', 'projectId', projectId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getEmailTemplate', 'type', type)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('getEmailTemplate', 'locale', locale)
            const localVarPath = `/projects/{projectId}/templates/email/{type}/{locale}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/templates/email/{type}/{locale}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get key
         * @param {string} projectId Project unique ID.
         * @param {string} keyId Key unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKey: async (projectId: string, keyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getKey', 'projectId', projectId)
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('getKey', 'keyId', keyId)
            const localVarPath = `/projects/{projectId}/keys/{keyId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId !== undefined ? keyId : `-keyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/keys/{keyId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get platform
         * @param {string} projectId Project unique ID.
         * @param {string} platformId Platform unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlatformById: async (projectId: string, platformId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getPlatformById', 'projectId', projectId)
            // verify required parameter 'platformId' is not null or undefined
            assertParamExists('getPlatformById', 'platformId', platformId)
            const localVarPath = `/projects/{projectId}/platforms/{platformId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"platformId"}}`, encodeURIComponent(String(platformId !== undefined ? platformId : `-platformId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/platforms/{platformId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get custom SMS template
         * @param {string} projectId Project unique ID.
         * @param {'verification' | 'login' | 'invitation' | 'mfachallenge'} type Template type
         * @param {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'} locale Template locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsTemplate: async (projectId: string, type: 'verification' | 'login' | 'invitation' | 'mfachallenge', locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSmsTemplate', 'projectId', projectId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getSmsTemplate', 'type', type)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('getSmsTemplate', 'locale', locale)
            const localVarPath = `/projects/{projectId}/templates/sms/{type}/{locale}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/templates/sms/{type}/{locale}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook
         * @param {string} projectId Project unique ID.
         * @param {string} webhookId Webhook unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhook: async (projectId: string, webhookId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getWebhook', 'projectId', projectId)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('getWebhook', 'webhookId', webhookId)
            const localVarPath = `/projects/{projectId}/webhooks/{webhookId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhookId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/webhooks/{webhookId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List keys
         * @param {string} projectId Project unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeys: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listKeys', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/keys`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/keys',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List platforms
         * @param {string} projectId Project unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlatforms: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listPlatforms', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/platforms`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/platforms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List projects
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, teamId
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List webhooks
         * @param {string} projectId Project unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhooks: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listWebhooks', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/webhooks`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/webhooks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete project
         * @param {string} projectId Project unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeById', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset custom email template
         * @param {string} projectId Project unique ID.
         * @param {'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'} type Template type
         * @param {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'} locale Template locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmailTemplate: async (projectId: string, type: 'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge', locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('resetEmailTemplate', 'projectId', projectId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('resetEmailTemplate', 'type', type)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('resetEmailTemplate', 'locale', locale)
            const localVarPath = `/projects/{projectId}/templates/email/{type}/{locale}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/templates/email/{type}/{locale}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset custom SMS template
         * @param {string} projectId Project unique ID.
         * @param {'verification' | 'login' | 'invitation' | 'mfachallenge'} type Template type
         * @param {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'} locale Template locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSmsTemplate: async (projectId: string, type: 'verification' | 'login' | 'invitation' | 'mfachallenge', locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('resetSmsTemplate', 'projectId', projectId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('resetSmsTemplate', 'type', type)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('resetSmsTemplate', 'locale', locale)
            const localVarPath = `/projects/{projectId}/templates/sms/{type}/{locale}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/templates/sms/{type}/{locale}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update all API status
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateAllApiStatusRequest} [projectsUpdateAllApiStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllApiStatus: async (projectId: string, projectsUpdateAllApiStatusRequest?: ProjectsUpdateAllApiStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateAllApiStatus', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/api/all`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateAllApiStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/api/all',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateAllApiStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update all service status
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateAllServiceStatusRequest} [projectsUpdateAllServiceStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllServiceStatus: async (projectId: string, projectsUpdateAllServiceStatusRequest?: ProjectsUpdateAllServiceStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateAllServiceStatus', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/service/all`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateAllServiceStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/service/all',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateAllServiceStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update API status
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateApiStatusRequest} [projectsUpdateApiStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiStatus: async (projectId: string, projectsUpdateApiStatusRequest?: ProjectsUpdateApiStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateApiStatus', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/api`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateApiStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/api',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateApiStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update project authentication duration
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateAuthDurationRequest} [projectsUpdateAuthDurationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthDuration: async (projectId: string, projectsUpdateAuthDurationRequest?: ProjectsUpdateAuthDurationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateAuthDuration', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/auth/duration`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateAuthDurationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/auth/duration',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateAuthDurationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update project auth method status. Use this endpoint to enable or disable a given auth method for this project.
         * @param {string} projectId Project unique ID.
         * @param {'email-password' | 'magic-url' | 'email-otp' | 'anonymous' | 'invites' | 'jwt' | 'phone'} method Auth Method. Possible values: email-password,magic-url,email-otp,anonymous,invites,jwt,phone
         * @param {ProjectsUpdateAuthMethodStatusRequest} [projectsUpdateAuthMethodStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthMethodStatus: async (projectId: string, method: 'email-password' | 'magic-url' | 'email-otp' | 'anonymous' | 'invites' | 'jwt' | 'phone', projectsUpdateAuthMethodStatusRequest?: ProjectsUpdateAuthMethodStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateAuthMethodStatus', 'projectId', projectId)
            // verify required parameter 'method' is not null or undefined
            assertParamExists('updateAuthMethodStatus', 'method', method)
            const localVarPath = `/projects/{projectId}/auth/{method}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"method"}}`, encodeURIComponent(String(method !== undefined ? method : `-method-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateAuthMethodStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/auth/{method}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateAuthMethodStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update authentication password dictionary status. Use this endpoint to enable or disable the dicitonary check for user password
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateAuthPasswordDictionaryRequest} [projectsUpdateAuthPasswordDictionaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthPasswordDictionary: async (projectId: string, projectsUpdateAuthPasswordDictionaryRequest?: ProjectsUpdateAuthPasswordDictionaryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateAuthPasswordDictionary', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/auth/password-dictionary`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateAuthPasswordDictionaryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/auth/password-dictionary',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateAuthPasswordDictionaryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update authentication password history. Use this endpoint to set the number of password history to save and 0 to disable password history.
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateAuthPasswordHistoryRequest} [projectsUpdateAuthPasswordHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthPasswordHistory: async (projectId: string, projectsUpdateAuthPasswordHistoryRequest?: ProjectsUpdateAuthPasswordHistoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateAuthPasswordHistory', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/auth/password-history`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateAuthPasswordHistoryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/auth/password-history',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateAuthPasswordHistoryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update custom email templates
         * @param {string} projectId Project unique ID.
         * @param {'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'} type Template type
         * @param {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'} locale Template locale
         * @param {ProjectsUpdateCustomEmailTemplatesRequest} [projectsUpdateCustomEmailTemplatesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomEmailTemplates: async (projectId: string, type: 'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge', locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu', projectsUpdateCustomEmailTemplatesRequest?: ProjectsUpdateCustomEmailTemplatesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateCustomEmailTemplates', 'projectId', projectId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('updateCustomEmailTemplates', 'type', type)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('updateCustomEmailTemplates', 'locale', locale)
            const localVarPath = `/projects/{projectId}/templates/email/{type}/{locale}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateCustomEmailTemplatesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/templates/email/{type}/{locale}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateCustomEmailTemplatesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update project
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateDetailRequest} [projectsUpdateDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetail: async (projectId: string, projectsUpdateDetailRequest?: ProjectsUpdateDetailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateDetail', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateDetailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateDetailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update key
         * @param {string} projectId Project unique ID.
         * @param {string} keyId Key unique ID.
         * @param {ProjectsUpdateKeyRequest} [projectsUpdateKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKey: async (projectId: string, keyId: string, projectsUpdateKeyRequest?: ProjectsUpdateKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateKey', 'projectId', projectId)
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('updateKey', 'keyId', keyId)
            const localVarPath = `/projects/{projectId}/keys/{keyId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId !== undefined ? keyId : `-keyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateKeyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/keys/{keyId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateKeyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update project user sessions limit
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateMaxSessionsLimitRequest} [projectsUpdateMaxSessionsLimitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMaxSessionsLimit: async (projectId: string, projectsUpdateMaxSessionsLimitRequest?: ProjectsUpdateMaxSessionsLimitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateMaxSessionsLimit', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/auth/max-sessions`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateMaxSessionsLimitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/auth/max-sessions',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateMaxSessionsLimitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update project OAuth2
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateOAuthRequest} [projectsUpdateOAuthRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOAuth: async (projectId: string, projectsUpdateOAuthRequest?: ProjectsUpdateOAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateOAuth', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/oauth2`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateOAuthRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/oauth2',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateOAuthRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update platform
         * @param {string} projectId Project unique ID.
         * @param {string} platformId Platform unique ID.
         * @param {ProjectsUpdatePlatformByIdRequest} [projectsUpdatePlatformByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlatformById: async (projectId: string, platformId: string, projectsUpdatePlatformByIdRequest?: ProjectsUpdatePlatformByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updatePlatformById', 'projectId', projectId)
            // verify required parameter 'platformId' is not null or undefined
            assertParamExists('updatePlatformById', 'platformId', platformId)
            const localVarPath = `/projects/{projectId}/platforms/{platformId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"platformId"}}`, encodeURIComponent(String(platformId !== undefined ? platformId : `-platformId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdatePlatformByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/platforms/{platformId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdatePlatformByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update service status
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateServiceStatusRequest} [projectsUpdateServiceStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceStatus: async (projectId: string, projectsUpdateServiceStatusRequest?: ProjectsUpdateServiceStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateServiceStatus', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/service`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateServiceStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/service',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateServiceStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update custom SMS template
         * @param {string} projectId Project unique ID.
         * @param {'verification' | 'login' | 'invitation' | 'mfachallenge'} type Template type
         * @param {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'} locale Template locale
         * @param {ProjectsUpdateSmsTemplateRequest} [projectsUpdateSmsTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSmsTemplate: async (projectId: string, type: 'verification' | 'login' | 'invitation' | 'mfachallenge', locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu', projectsUpdateSmsTemplateRequest?: ProjectsUpdateSmsTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateSmsTemplate', 'projectId', projectId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('updateSmsTemplate', 'type', type)
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('updateSmsTemplate', 'locale', locale)
            const localVarPath = `/projects/{projectId}/templates/sms/{type}/{locale}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)))
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale !== undefined ? locale : `-locale-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateSmsTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/templates/sms/{type}/{locale}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateSmsTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update SMTP
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateSmtpRequest} [projectsUpdateSmtpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSmtp: async (projectId: string, projectsUpdateSmtpRequest?: ProjectsUpdateSmtpRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateSmtp', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/smtp`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateSmtpRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/smtp',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateSmtpRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Project Team
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateTeamRequest} [projectsUpdateTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: async (projectId: string, projectsUpdateTeamRequest?: ProjectsUpdateTeamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateTeam', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/team`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateTeamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/team',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateTeamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update project users limit
         * @param {string} projectId Project unique ID.
         * @param {ProjectsUpdateUserLimitRequest} [projectsUpdateUserLimitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserLimit: async (projectId: string, projectsUpdateUserLimitRequest?: ProjectsUpdateUserLimitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateUserLimit', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/auth/limit`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateUserLimitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/auth/limit',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateUserLimitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update webhook
         * @param {string} projectId Project unique ID.
         * @param {string} webhookId Webhook unique ID.
         * @param {ProjectsUpdateWebhookRequest} [projectsUpdateWebhookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook: async (projectId: string, webhookId: string, projectsUpdateWebhookRequest?: ProjectsUpdateWebhookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateWebhook', 'projectId', projectId)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('updateWebhook', 'webhookId', webhookId)
            const localVarPath = `/projects/{projectId}/webhooks/{webhookId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhookId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateWebhookRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/webhooks/{webhookId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateWebhookRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update webhook signature key
         * @param {string} projectId Project unique ID.
         * @param {string} webhookId Webhook unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookSignature: async (projectId: string, webhookId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateWebhookSignature', 'projectId', projectId)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('updateWebhookSignature', 'webhookId', webhookId)
            const localVarPath = `/projects/{projectId}/webhooks/{webhookId}/signature`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhookId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{projectId}/webhooks/{webhookId}/signature',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create key
         * @param {ProjectsApiCreateKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKey(requestParameters: ProjectsApiCreateKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Key>> {
            const projectsCreateKeyRequest: ProjectsCreateKeyRequest = {
                name: requestParameters.name,
                scopes: requestParameters.scopes,
                expire: requestParameters.expire
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKey(requestParameters.projectId, projectsCreateKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create project
         * @param {ProjectsApiCreateNewProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewProject(requestParameters: ProjectsApiCreateNewProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsCreateNewProjectRequest: ProjectsCreateNewProjectRequest = {
                description: requestParameters.description,
                projectId: requestParameters.projectId,
                name: requestParameters.name,
                teamId: requestParameters.teamId,
                region: requestParameters.region,
                logo: requestParameters.logo,
                url: requestParameters.url,
                legalName: requestParameters.legalName,
                legalCountry: requestParameters.legalCountry,
                legalState: requestParameters.legalState,
                legalCity: requestParameters.legalCity,
                legalAddress: requestParameters.legalAddress,
                legalTaxId: requestParameters.legalTaxId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewProject(projectsCreateNewProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create platform
         * @param {ProjectsApiCreatePlatformRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlatform(requestParameters: ProjectsApiCreatePlatformRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Platform>> {
            const projectsCreatePlatformRequest: ProjectsCreatePlatformRequest = {
                type: requestParameters.type,
                name: requestParameters.name,
                key: requestParameters.key,
                store: requestParameters.store,
                hostname: requestParameters.hostname
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlatform(requestParameters.projectId, projectsCreatePlatformRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create SMTP test
         * @param {ProjectsApiCreateSmtpTestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSmtpTest(requestParameters: ProjectsApiCreateSmtpTestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const projectsCreateSmtpTestRequest: ProjectsCreateSmtpTestRequest = {
                emails: requestParameters.emails,
                senderName: requestParameters.senderName,
                senderEmail: requestParameters.senderEmail,
                replyTo: requestParameters.replyTo,
                host: requestParameters.host,
                port: requestParameters.port,
                username: requestParameters.username,
                password: requestParameters.password,
                secure: requestParameters.secure
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSmtpTest(requestParameters.projectId, projectsCreateSmtpTestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create webhook
         * @param {ProjectsApiCreateWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebhook(requestParameters: ProjectsApiCreateWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>> {
            const projectsCreateWebhookRequest: ProjectsCreateWebhookRequest = {
                security: requestParameters.security,
                name: requestParameters.name,
                enabled: requestParameters.enabled,
                events: requestParameters.events,
                url: requestParameters.url,
                httpUser: requestParameters.httpUser,
                httpPass: requestParameters.httpPass
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhook(requestParameters.projectId, projectsCreateWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete key
         * @param {ProjectsApiDeleteKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKey(requestParameters: ProjectsApiDeleteKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKey(requestParameters.projectId, requestParameters.keyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete platform
         * @param {ProjectsApiDeletePlatformRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlatform(requestParameters: ProjectsApiDeletePlatformRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlatform(requestParameters.projectId, requestParameters.platformId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete webhook
         * @param {ProjectsApiDeleteWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhook(requestParameters: ProjectsApiDeleteWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(requestParameters.projectId, requestParameters.webhookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Enable or disable checking user passwords for similarity with their personal data.
         * @param {ProjectsApiEnablePersonalDataCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enablePersonalDataCheck(requestParameters: ProjectsApiEnablePersonalDataCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsEnablePersonalDataCheckRequest: ProjectsEnablePersonalDataCheckRequest = {
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.enablePersonalDataCheck(requestParameters.projectId, projectsEnablePersonalDataCheckRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get project
         * @param {ProjectsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: ProjectsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get custom email template
         * @param {ProjectsApiGetEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailTemplate(requestParameters: ProjectsApiGetEmailTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailTemplate(requestParameters.projectId, requestParameters.type, requestParameters.locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get key
         * @param {ProjectsApiGetKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKey(requestParameters: ProjectsApiGetKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Key>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKey(requestParameters.projectId, requestParameters.keyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get platform
         * @param {ProjectsApiGetPlatformByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlatformById(requestParameters: ProjectsApiGetPlatformByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Platform>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlatformById(requestParameters.projectId, requestParameters.platformId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get custom SMS template
         * @param {ProjectsApiGetSmsTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsTemplate(requestParameters: ProjectsApiGetSmsTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmsTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsTemplate(requestParameters.projectId, requestParameters.type, requestParameters.locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get webhook
         * @param {ProjectsApiGetWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhook(requestParameters: ProjectsApiGetWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhook(requestParameters.projectId, requestParameters.webhookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List keys
         * @param {ProjectsApiListKeysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listKeys(requestParameters: ProjectsApiListKeysRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listKeys(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List platforms
         * @param {ProjectsApiListPlatformsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlatforms(requestParameters: ProjectsApiListPlatformsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlatformList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlatforms(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List projects
         * @param {ProjectsApiListProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(requestParameters: ProjectsApiListProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List webhooks
         * @param {ProjectsApiListWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebhooks(requestParameters: ProjectsApiListWebhooksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebhooks(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete project
         * @param {ProjectsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: ProjectsApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reset custom email template
         * @param {ProjectsApiResetEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetEmailTemplate(requestParameters: ProjectsApiResetEmailTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetEmailTemplate(requestParameters.projectId, requestParameters.type, requestParameters.locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reset custom SMS template
         * @param {ProjectsApiResetSmsTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetSmsTemplate(requestParameters: ProjectsApiResetSmsTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmsTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetSmsTemplate(requestParameters.projectId, requestParameters.type, requestParameters.locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update all API status
         * @param {ProjectsApiUpdateAllApiStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAllApiStatus(requestParameters: ProjectsApiUpdateAllApiStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateAllApiStatusRequest: ProjectsUpdateAllApiStatusRequest = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAllApiStatus(requestParameters.projectId, projectsUpdateAllApiStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update all service status
         * @param {ProjectsApiUpdateAllServiceStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAllServiceStatus(requestParameters: ProjectsApiUpdateAllServiceStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateAllServiceStatusRequest: ProjectsUpdateAllServiceStatusRequest = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAllServiceStatus(requestParameters.projectId, projectsUpdateAllServiceStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update API status
         * @param {ProjectsApiUpdateApiStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApiStatus(requestParameters: ProjectsApiUpdateApiStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateApiStatusRequest: ProjectsUpdateApiStatusRequest = {
                api: requestParameters.api,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateApiStatus(requestParameters.projectId, projectsUpdateApiStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update project authentication duration
         * @param {ProjectsApiUpdateAuthDurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthDuration(requestParameters: ProjectsApiUpdateAuthDurationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateAuthDurationRequest: ProjectsUpdateAuthDurationRequest = {
                duration: requestParameters.duration
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthDuration(requestParameters.projectId, projectsUpdateAuthDurationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update project auth method status. Use this endpoint to enable or disable a given auth method for this project.
         * @param {ProjectsApiUpdateAuthMethodStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthMethodStatus(requestParameters: ProjectsApiUpdateAuthMethodStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateAuthMethodStatusRequest: ProjectsUpdateAuthMethodStatusRequest = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthMethodStatus(requestParameters.projectId, requestParameters.method, projectsUpdateAuthMethodStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update authentication password dictionary status. Use this endpoint to enable or disable the dicitonary check for user password
         * @param {ProjectsApiUpdateAuthPasswordDictionaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthPasswordDictionary(requestParameters: ProjectsApiUpdateAuthPasswordDictionaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateAuthPasswordDictionaryRequest: ProjectsUpdateAuthPasswordDictionaryRequest = {
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthPasswordDictionary(requestParameters.projectId, projectsUpdateAuthPasswordDictionaryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update authentication password history. Use this endpoint to set the number of password history to save and 0 to disable password history.
         * @param {ProjectsApiUpdateAuthPasswordHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthPasswordHistory(requestParameters: ProjectsApiUpdateAuthPasswordHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateAuthPasswordHistoryRequest: ProjectsUpdateAuthPasswordHistoryRequest = {
                limit: requestParameters.limit
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthPasswordHistory(requestParameters.projectId, projectsUpdateAuthPasswordHistoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update custom email templates
         * @param {ProjectsApiUpdateCustomEmailTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomEmailTemplates(requestParameters: ProjectsApiUpdateCustomEmailTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateCustomEmailTemplatesRequest: ProjectsUpdateCustomEmailTemplatesRequest = {
                subject: requestParameters.subject,
                message: requestParameters.message,
                senderName: requestParameters.senderName,
                senderEmail: requestParameters.senderEmail,
                replyTo: requestParameters.replyTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomEmailTemplates(requestParameters.projectId, requestParameters.type, requestParameters.locale, projectsUpdateCustomEmailTemplatesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update project
         * @param {ProjectsApiUpdateDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetail(requestParameters: ProjectsApiUpdateDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateDetailRequest: ProjectsUpdateDetailRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                logo: requestParameters.logo,
                url: requestParameters.url,
                legalName: requestParameters.legalName,
                legalCountry: requestParameters.legalCountry,
                legalState: requestParameters.legalState,
                legalCity: requestParameters.legalCity,
                legalAddress: requestParameters.legalAddress,
                legalTaxId: requestParameters.legalTaxId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetail(requestParameters.projectId, projectsUpdateDetailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update key
         * @param {ProjectsApiUpdateKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateKey(requestParameters: ProjectsApiUpdateKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Key>> {
            const projectsUpdateKeyRequest: ProjectsUpdateKeyRequest = {
                name: requestParameters.name,
                scopes: requestParameters.scopes,
                expire: requestParameters.expire
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateKey(requestParameters.projectId, requestParameters.keyId, projectsUpdateKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update project user sessions limit
         * @param {ProjectsApiUpdateMaxSessionsLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMaxSessionsLimit(requestParameters: ProjectsApiUpdateMaxSessionsLimitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateMaxSessionsLimitRequest: ProjectsUpdateMaxSessionsLimitRequest = {
                limit: requestParameters.limit
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMaxSessionsLimit(requestParameters.projectId, projectsUpdateMaxSessionsLimitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update project OAuth2
         * @param {ProjectsApiUpdateOAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOAuth(requestParameters: ProjectsApiUpdateOAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateOAuthRequest: ProjectsUpdateOAuthRequest = {
                provider: requestParameters.provider,
                appId: requestParameters.appId,
                secret: requestParameters.secret,
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOAuth(requestParameters.projectId, projectsUpdateOAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update platform
         * @param {ProjectsApiUpdatePlatformByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlatformById(requestParameters: ProjectsApiUpdatePlatformByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Platform>> {
            const projectsUpdatePlatformByIdRequest: ProjectsUpdatePlatformByIdRequest = {
                name: requestParameters.name,
                key: requestParameters.key,
                store: requestParameters.store,
                hostname: requestParameters.hostname
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlatformById(requestParameters.projectId, requestParameters.platformId, projectsUpdatePlatformByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update service status
         * @param {ProjectsApiUpdateServiceStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateServiceStatus(requestParameters: ProjectsApiUpdateServiceStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateServiceStatusRequest: ProjectsUpdateServiceStatusRequest = {
                service: requestParameters.service,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateServiceStatus(requestParameters.projectId, projectsUpdateServiceStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update custom SMS template
         * @param {ProjectsApiUpdateSmsTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSmsTemplate(requestParameters: ProjectsApiUpdateSmsTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmsTemplate>> {
            const projectsUpdateSmsTemplateRequest: ProjectsUpdateSmsTemplateRequest = {
                message: requestParameters.message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSmsTemplate(requestParameters.projectId, requestParameters.type, requestParameters.locale, projectsUpdateSmsTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update SMTP
         * @param {ProjectsApiUpdateSmtpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSmtp(requestParameters: ProjectsApiUpdateSmtpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateSmtpRequest: ProjectsUpdateSmtpRequest = {
                enabled: requestParameters.enabled,
                senderName: requestParameters.senderName,
                senderEmail: requestParameters.senderEmail,
                replyTo: requestParameters.replyTo,
                host: requestParameters.host,
                port: requestParameters.port,
                username: requestParameters.username,
                password: requestParameters.password,
                secure: requestParameters.secure
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSmtp(requestParameters.projectId, projectsUpdateSmtpRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Project Team
         * @param {ProjectsApiUpdateTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeam(requestParameters: ProjectsApiUpdateTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateTeamRequest: ProjectsUpdateTeamRequest = {
                teamId: requestParameters.teamId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(requestParameters.projectId, projectsUpdateTeamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update project users limit
         * @param {ProjectsApiUpdateUserLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserLimit(requestParameters: ProjectsApiUpdateUserLimitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const projectsUpdateUserLimitRequest: ProjectsUpdateUserLimitRequest = {
                limit: requestParameters.limit
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserLimit(requestParameters.projectId, projectsUpdateUserLimitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update webhook
         * @param {ProjectsApiUpdateWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebhook(requestParameters: ProjectsApiUpdateWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>> {
            const projectsUpdateWebhookRequest: ProjectsUpdateWebhookRequest = {
                security: requestParameters.security,
                name: requestParameters.name,
                enabled: requestParameters.enabled,
                events: requestParameters.events,
                url: requestParameters.url,
                httpUser: requestParameters.httpUser,
                httpPass: requestParameters.httpPass
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhook(requestParameters.projectId, requestParameters.webhookId, projectsUpdateWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update webhook signature key
         * @param {ProjectsApiUpdateWebhookSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebhookSignature(requestParameters: ProjectsApiUpdateWebhookSignatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhookSignature(requestParameters.projectId, requestParameters.webhookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create key
         * @param {ProjectsApiCreateKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKey(requestParameters: ProjectsApiCreateKeyRequest, options?: AxiosRequestConfig): AxiosPromise<Key> {
            return localVarFp.createKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create project
         * @param {ProjectsApiCreateNewProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewProject(requestParameters: ProjectsApiCreateNewProjectRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.createNewProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create platform
         * @param {ProjectsApiCreatePlatformRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlatform(requestParameters: ProjectsApiCreatePlatformRequest, options?: AxiosRequestConfig): AxiosPromise<Platform> {
            return localVarFp.createPlatform(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create SMTP test
         * @param {ProjectsApiCreateSmtpTestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSmtpTest(requestParameters: ProjectsApiCreateSmtpTestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createSmtpTest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create webhook
         * @param {ProjectsApiCreateWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhook(requestParameters: ProjectsApiCreateWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<Webhook> {
            return localVarFp.createWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete key
         * @param {ProjectsApiDeleteKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKey(requestParameters: ProjectsApiDeleteKeyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete platform
         * @param {ProjectsApiDeletePlatformRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlatform(requestParameters: ProjectsApiDeletePlatformRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePlatform(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete webhook
         * @param {ProjectsApiDeleteWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook(requestParameters: ProjectsApiDeleteWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable or disable checking user passwords for similarity with their personal data.
         * @param {ProjectsApiEnablePersonalDataCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePersonalDataCheck(requestParameters: ProjectsApiEnablePersonalDataCheckRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.enablePersonalDataCheck(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project
         * @param {ProjectsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: ProjectsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get custom email template
         * @param {ProjectsApiGetEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate(requestParameters: ProjectsApiGetEmailTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<EmailTemplate> {
            return localVarFp.getEmailTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get key
         * @param {ProjectsApiGetKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKey(requestParameters: ProjectsApiGetKeyRequest, options?: AxiosRequestConfig): AxiosPromise<Key> {
            return localVarFp.getKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get platform
         * @param {ProjectsApiGetPlatformByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlatformById(requestParameters: ProjectsApiGetPlatformByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Platform> {
            return localVarFp.getPlatformById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get custom SMS template
         * @param {ProjectsApiGetSmsTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsTemplate(requestParameters: ProjectsApiGetSmsTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<SmsTemplate> {
            return localVarFp.getSmsTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get webhook
         * @param {ProjectsApiGetWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhook(requestParameters: ProjectsApiGetWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<Webhook> {
            return localVarFp.getWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List keys
         * @param {ProjectsApiListKeysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeys(requestParameters: ProjectsApiListKeysRequest, options?: AxiosRequestConfig): AxiosPromise<KeyList> {
            return localVarFp.listKeys(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List platforms
         * @param {ProjectsApiListPlatformsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlatforms(requestParameters: ProjectsApiListPlatformsRequest, options?: AxiosRequestConfig): AxiosPromise<PlatformList> {
            return localVarFp.listPlatforms(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List projects
         * @param {ProjectsApiListProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(requestParameters: ProjectsApiListProjectsRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectList> {
            return localVarFp.listProjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List webhooks
         * @param {ProjectsApiListWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhooks(requestParameters: ProjectsApiListWebhooksRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookList> {
            return localVarFp.listWebhooks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete project
         * @param {ProjectsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: ProjectsApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset custom email template
         * @param {ProjectsApiResetEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmailTemplate(requestParameters: ProjectsApiResetEmailTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<EmailTemplate> {
            return localVarFp.resetEmailTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset custom SMS template
         * @param {ProjectsApiResetSmsTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSmsTemplate(requestParameters: ProjectsApiResetSmsTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<SmsTemplate> {
            return localVarFp.resetSmsTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update all API status
         * @param {ProjectsApiUpdateAllApiStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllApiStatus(requestParameters: ProjectsApiUpdateAllApiStatusRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateAllApiStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update all service status
         * @param {ProjectsApiUpdateAllServiceStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllServiceStatus(requestParameters: ProjectsApiUpdateAllServiceStatusRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateAllServiceStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update API status
         * @param {ProjectsApiUpdateApiStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiStatus(requestParameters: ProjectsApiUpdateApiStatusRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateApiStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update project authentication duration
         * @param {ProjectsApiUpdateAuthDurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthDuration(requestParameters: ProjectsApiUpdateAuthDurationRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateAuthDuration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update project auth method status. Use this endpoint to enable or disable a given auth method for this project.
         * @param {ProjectsApiUpdateAuthMethodStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthMethodStatus(requestParameters: ProjectsApiUpdateAuthMethodStatusRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateAuthMethodStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update authentication password dictionary status. Use this endpoint to enable or disable the dicitonary check for user password
         * @param {ProjectsApiUpdateAuthPasswordDictionaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthPasswordDictionary(requestParameters: ProjectsApiUpdateAuthPasswordDictionaryRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateAuthPasswordDictionary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update authentication password history. Use this endpoint to set the number of password history to save and 0 to disable password history.
         * @param {ProjectsApiUpdateAuthPasswordHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthPasswordHistory(requestParameters: ProjectsApiUpdateAuthPasswordHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateAuthPasswordHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update custom email templates
         * @param {ProjectsApiUpdateCustomEmailTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomEmailTemplates(requestParameters: ProjectsApiUpdateCustomEmailTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateCustomEmailTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update project
         * @param {ProjectsApiUpdateDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetail(requestParameters: ProjectsApiUpdateDetailRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update key
         * @param {ProjectsApiUpdateKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKey(requestParameters: ProjectsApiUpdateKeyRequest, options?: AxiosRequestConfig): AxiosPromise<Key> {
            return localVarFp.updateKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update project user sessions limit
         * @param {ProjectsApiUpdateMaxSessionsLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMaxSessionsLimit(requestParameters: ProjectsApiUpdateMaxSessionsLimitRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateMaxSessionsLimit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update project OAuth2
         * @param {ProjectsApiUpdateOAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOAuth(requestParameters: ProjectsApiUpdateOAuthRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateOAuth(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update platform
         * @param {ProjectsApiUpdatePlatformByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlatformById(requestParameters: ProjectsApiUpdatePlatformByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Platform> {
            return localVarFp.updatePlatformById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update service status
         * @param {ProjectsApiUpdateServiceStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceStatus(requestParameters: ProjectsApiUpdateServiceStatusRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateServiceStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update custom SMS template
         * @param {ProjectsApiUpdateSmsTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSmsTemplate(requestParameters: ProjectsApiUpdateSmsTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<SmsTemplate> {
            return localVarFp.updateSmsTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update SMTP
         * @param {ProjectsApiUpdateSmtpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSmtp(requestParameters: ProjectsApiUpdateSmtpRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateSmtp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Project Team
         * @param {ProjectsApiUpdateTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(requestParameters: ProjectsApiUpdateTeamRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update project users limit
         * @param {ProjectsApiUpdateUserLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserLimit(requestParameters: ProjectsApiUpdateUserLimitRequest, options?: AxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.updateUserLimit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update webhook
         * @param {ProjectsApiUpdateWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook(requestParameters: ProjectsApiUpdateWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<Webhook> {
            return localVarFp.updateWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update webhook signature key
         * @param {ProjectsApiUpdateWebhookSignatureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookSignature(requestParameters: ProjectsApiUpdateWebhookSignatureRequest, options?: AxiosRequestConfig): AxiosPromise<Webhook> {
            return localVarFp.updateWebhookSignature(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createKey operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateKeyRequest
 */
export type ProjectsApiCreateKeyRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiCreateKey
    */
    readonly projectId: string
    
} & ProjectsCreateKeyRequest

/**
 * Request parameters for createNewProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateNewProjectRequest
 */
export type ProjectsApiCreateNewProjectRequest = {
    
} & ProjectsCreateNewProjectRequest

/**
 * Request parameters for createPlatform operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreatePlatformRequest
 */
export type ProjectsApiCreatePlatformRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiCreatePlatform
    */
    readonly projectId: string
    
} & ProjectsCreatePlatformRequest

/**
 * Request parameters for createSmtpTest operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateSmtpTestRequest
 */
export type ProjectsApiCreateSmtpTestRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiCreateSmtpTest
    */
    readonly projectId: string
    
} & ProjectsCreateSmtpTestRequest

/**
 * Request parameters for createWebhook operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateWebhookRequest
 */
export type ProjectsApiCreateWebhookRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiCreateWebhook
    */
    readonly projectId: string
    
} & ProjectsCreateWebhookRequest

/**
 * Request parameters for deleteKey operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteKeyRequest
 */
export type ProjectsApiDeleteKeyRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiDeleteKey
    */
    readonly projectId: string
    
    /**
    * Key unique ID.
    * @type {string}
    * @memberof ProjectsApiDeleteKey
    */
    readonly keyId: string
    
}

/**
 * Request parameters for deletePlatform operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeletePlatformRequest
 */
export type ProjectsApiDeletePlatformRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiDeletePlatform
    */
    readonly projectId: string
    
    /**
    * Platform unique ID.
    * @type {string}
    * @memberof ProjectsApiDeletePlatform
    */
    readonly platformId: string
    
}

/**
 * Request parameters for deleteWebhook operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteWebhookRequest
 */
export type ProjectsApiDeleteWebhookRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiDeleteWebhook
    */
    readonly projectId: string
    
    /**
    * Webhook unique ID.
    * @type {string}
    * @memberof ProjectsApiDeleteWebhook
    */
    readonly webhookId: string
    
}

/**
 * Request parameters for enablePersonalDataCheck operation in ProjectsApi.
 * @export
 * @interface ProjectsApiEnablePersonalDataCheckRequest
 */
export type ProjectsApiEnablePersonalDataCheckRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiEnablePersonalDataCheck
    */
    readonly projectId: string
    
} & ProjectsEnablePersonalDataCheckRequest

/**
 * Request parameters for get operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetRequest
 */
export type ProjectsApiGetRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiGet
    */
    readonly projectId: string
    
}

/**
 * Request parameters for getEmailTemplate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetEmailTemplateRequest
 */
export type ProjectsApiGetEmailTemplateRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiGetEmailTemplate
    */
    readonly projectId: string
    
    /**
    * Template type
    * @type {'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'}
    * @memberof ProjectsApiGetEmailTemplate
    */
    readonly type: 'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'
    
    /**
    * Template locale
    * @type {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'}
    * @memberof ProjectsApiGetEmailTemplate
    */
    readonly locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'
    
}

/**
 * Request parameters for getKey operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetKeyRequest
 */
export type ProjectsApiGetKeyRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiGetKey
    */
    readonly projectId: string
    
    /**
    * Key unique ID.
    * @type {string}
    * @memberof ProjectsApiGetKey
    */
    readonly keyId: string
    
}

/**
 * Request parameters for getPlatformById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetPlatformByIdRequest
 */
export type ProjectsApiGetPlatformByIdRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiGetPlatformById
    */
    readonly projectId: string
    
    /**
    * Platform unique ID.
    * @type {string}
    * @memberof ProjectsApiGetPlatformById
    */
    readonly platformId: string
    
}

/**
 * Request parameters for getSmsTemplate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetSmsTemplateRequest
 */
export type ProjectsApiGetSmsTemplateRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiGetSmsTemplate
    */
    readonly projectId: string
    
    /**
    * Template type
    * @type {'verification' | 'login' | 'invitation' | 'mfachallenge'}
    * @memberof ProjectsApiGetSmsTemplate
    */
    readonly type: 'verification' | 'login' | 'invitation' | 'mfachallenge'
    
    /**
    * Template locale
    * @type {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'}
    * @memberof ProjectsApiGetSmsTemplate
    */
    readonly locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'
    
}

/**
 * Request parameters for getWebhook operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetWebhookRequest
 */
export type ProjectsApiGetWebhookRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiGetWebhook
    */
    readonly projectId: string
    
    /**
    * Webhook unique ID.
    * @type {string}
    * @memberof ProjectsApiGetWebhook
    */
    readonly webhookId: string
    
}

/**
 * Request parameters for listKeys operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListKeysRequest
 */
export type ProjectsApiListKeysRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiListKeys
    */
    readonly projectId: string
    
}

/**
 * Request parameters for listPlatforms operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListPlatformsRequest
 */
export type ProjectsApiListPlatformsRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiListPlatforms
    */
    readonly projectId: string
    
}

/**
 * Request parameters for listProjects operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListProjectsRequest
 */
export type ProjectsApiListProjectsRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, teamId
    * @type {Array<string>}
    * @memberof ProjectsApiListProjects
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof ProjectsApiListProjects
    */
    readonly search?: string
    
}

/**
 * Request parameters for listWebhooks operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListWebhooksRequest
 */
export type ProjectsApiListWebhooksRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiListWebhooks
    */
    readonly projectId: string
    
}

/**
 * Request parameters for removeById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiRemoveByIdRequest
 */
export type ProjectsApiRemoveByIdRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiRemoveById
    */
    readonly projectId: string
    
}

/**
 * Request parameters for resetEmailTemplate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiResetEmailTemplateRequest
 */
export type ProjectsApiResetEmailTemplateRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiResetEmailTemplate
    */
    readonly projectId: string
    
    /**
    * Template type
    * @type {'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'}
    * @memberof ProjectsApiResetEmailTemplate
    */
    readonly type: 'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'
    
    /**
    * Template locale
    * @type {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'}
    * @memberof ProjectsApiResetEmailTemplate
    */
    readonly locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'
    
}

/**
 * Request parameters for resetSmsTemplate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiResetSmsTemplateRequest
 */
export type ProjectsApiResetSmsTemplateRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiResetSmsTemplate
    */
    readonly projectId: string
    
    /**
    * Template type
    * @type {'verification' | 'login' | 'invitation' | 'mfachallenge'}
    * @memberof ProjectsApiResetSmsTemplate
    */
    readonly type: 'verification' | 'login' | 'invitation' | 'mfachallenge'
    
    /**
    * Template locale
    * @type {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'}
    * @memberof ProjectsApiResetSmsTemplate
    */
    readonly locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'
    
}

/**
 * Request parameters for updateAllApiStatus operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateAllApiStatusRequest
 */
export type ProjectsApiUpdateAllApiStatusRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateAllApiStatus
    */
    readonly projectId: string
    
} & ProjectsUpdateAllApiStatusRequest

/**
 * Request parameters for updateAllServiceStatus operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateAllServiceStatusRequest
 */
export type ProjectsApiUpdateAllServiceStatusRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateAllServiceStatus
    */
    readonly projectId: string
    
} & ProjectsUpdateAllServiceStatusRequest

/**
 * Request parameters for updateApiStatus operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateApiStatusRequest
 */
export type ProjectsApiUpdateApiStatusRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateApiStatus
    */
    readonly projectId: string
    
} & ProjectsUpdateApiStatusRequest

/**
 * Request parameters for updateAuthDuration operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateAuthDurationRequest
 */
export type ProjectsApiUpdateAuthDurationRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateAuthDuration
    */
    readonly projectId: string
    
} & ProjectsUpdateAuthDurationRequest

/**
 * Request parameters for updateAuthMethodStatus operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateAuthMethodStatusRequest
 */
export type ProjectsApiUpdateAuthMethodStatusRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateAuthMethodStatus
    */
    readonly projectId: string
    
    /**
    * Auth Method. Possible values: email-password,magic-url,email-otp,anonymous,invites,jwt,phone
    * @type {'email-password' | 'magic-url' | 'email-otp' | 'anonymous' | 'invites' | 'jwt' | 'phone'}
    * @memberof ProjectsApiUpdateAuthMethodStatus
    */
    readonly method: 'email-password' | 'magic-url' | 'email-otp' | 'anonymous' | 'invites' | 'jwt' | 'phone'
    
} & ProjectsUpdateAuthMethodStatusRequest

/**
 * Request parameters for updateAuthPasswordDictionary operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateAuthPasswordDictionaryRequest
 */
export type ProjectsApiUpdateAuthPasswordDictionaryRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateAuthPasswordDictionary
    */
    readonly projectId: string
    
} & ProjectsUpdateAuthPasswordDictionaryRequest

/**
 * Request parameters for updateAuthPasswordHistory operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateAuthPasswordHistoryRequest
 */
export type ProjectsApiUpdateAuthPasswordHistoryRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateAuthPasswordHistory
    */
    readonly projectId: string
    
} & ProjectsUpdateAuthPasswordHistoryRequest

/**
 * Request parameters for updateCustomEmailTemplates operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateCustomEmailTemplatesRequest
 */
export type ProjectsApiUpdateCustomEmailTemplatesRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateCustomEmailTemplates
    */
    readonly projectId: string
    
    /**
    * Template type
    * @type {'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'}
    * @memberof ProjectsApiUpdateCustomEmailTemplates
    */
    readonly type: 'verification' | 'magicsession' | 'recovery' | 'invitation' | 'mfachallenge'
    
    /**
    * Template locale
    * @type {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'}
    * @memberof ProjectsApiUpdateCustomEmailTemplates
    */
    readonly locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'
    
} & ProjectsUpdateCustomEmailTemplatesRequest

/**
 * Request parameters for updateDetail operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateDetailRequest
 */
export type ProjectsApiUpdateDetailRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateDetail
    */
    readonly projectId: string
    
} & ProjectsUpdateDetailRequest

/**
 * Request parameters for updateKey operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateKeyRequest
 */
export type ProjectsApiUpdateKeyRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateKey
    */
    readonly projectId: string
    
    /**
    * Key unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateKey
    */
    readonly keyId: string
    
} & ProjectsUpdateKeyRequest

/**
 * Request parameters for updateMaxSessionsLimit operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateMaxSessionsLimitRequest
 */
export type ProjectsApiUpdateMaxSessionsLimitRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateMaxSessionsLimit
    */
    readonly projectId: string
    
} & ProjectsUpdateMaxSessionsLimitRequest

/**
 * Request parameters for updateOAuth operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateOAuthRequest
 */
export type ProjectsApiUpdateOAuthRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateOAuth
    */
    readonly projectId: string
    
} & ProjectsUpdateOAuthRequest

/**
 * Request parameters for updatePlatformById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdatePlatformByIdRequest
 */
export type ProjectsApiUpdatePlatformByIdRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdatePlatformById
    */
    readonly projectId: string
    
    /**
    * Platform unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdatePlatformById
    */
    readonly platformId: string
    
} & ProjectsUpdatePlatformByIdRequest

/**
 * Request parameters for updateServiceStatus operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateServiceStatusRequest
 */
export type ProjectsApiUpdateServiceStatusRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateServiceStatus
    */
    readonly projectId: string
    
} & ProjectsUpdateServiceStatusRequest

/**
 * Request parameters for updateSmsTemplate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateSmsTemplateRequest
 */
export type ProjectsApiUpdateSmsTemplateRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateSmsTemplate
    */
    readonly projectId: string
    
    /**
    * Template type
    * @type {'verification' | 'login' | 'invitation' | 'mfachallenge'}
    * @memberof ProjectsApiUpdateSmsTemplate
    */
    readonly type: 'verification' | 'login' | 'invitation' | 'mfachallenge'
    
    /**
    * Template locale
    * @type {'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'}
    * @memberof ProjectsApiUpdateSmsTemplate
    */
    readonly locale: 'af' | 'ar-ae' | 'ar-bh' | 'ar-dz' | 'ar-eg' | 'ar-iq' | 'ar-jo' | 'ar-kw' | 'ar-lb' | 'ar-ly' | 'ar-ma' | 'ar-om' | 'ar-qa' | 'ar-sa' | 'ar-sy' | 'ar-tn' | 'ar-ye' | 'as' | 'az' | 'be' | 'bg' | 'bh' | 'bn' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'de-at' | 'de-ch' | 'de-li' | 'de-lu' | 'el' | 'en' | 'en-au' | 'en-bz' | 'en-ca' | 'en-gb' | 'en-ie' | 'en-jm' | 'en-nz' | 'en-tt' | 'en-us' | 'en-za' | 'eo' | 'es' | 'es-ar' | 'es-bo' | 'es-cl' | 'es-co' | 'es-cr' | 'es-do' | 'es-ec' | 'es-gt' | 'es-hn' | 'es-mx' | 'es-ni' | 'es-pa' | 'es-pe' | 'es-pr' | 'es-py' | 'es-sv' | 'es-uy' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fo' | 'fr' | 'fr-be' | 'fr-ca' | 'fr-ch' | 'fr-lu' | 'ga' | 'gd' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'it-ch' | 'ja' | 'ji' | 'ko' | 'ku' | 'lt' | 'lv' | 'mk' | 'ml' | 'ms' | 'mt' | 'nb' | 'ne' | 'nl' | 'nl-be' | 'nn' | 'false' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'rm' | 'ro' | 'ro-md' | 'ru' | 'ru-md' | 'sb' | 'sk' | 'sl' | 'sq' | 'sr' | 'sv' | 'sv-fi' | 'th' | 'tn' | 'tr' | 'ts' | 'ua' | 'ur' | 've' | 'vi' | 'xh' | 'zh-cn' | 'zh-hk' | 'zh-sg' | 'zh-tw' | 'zu'
    
} & ProjectsUpdateSmsTemplateRequest

/**
 * Request parameters for updateSmtp operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateSmtpRequest
 */
export type ProjectsApiUpdateSmtpRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateSmtp
    */
    readonly projectId: string
    
} & ProjectsUpdateSmtpRequest

/**
 * Request parameters for updateTeam operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateTeamRequest
 */
export type ProjectsApiUpdateTeamRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateTeam
    */
    readonly projectId: string
    
} & ProjectsUpdateTeamRequest

/**
 * Request parameters for updateUserLimit operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateUserLimitRequest
 */
export type ProjectsApiUpdateUserLimitRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateUserLimit
    */
    readonly projectId: string
    
} & ProjectsUpdateUserLimitRequest

/**
 * Request parameters for updateWebhook operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateWebhookRequest
 */
export type ProjectsApiUpdateWebhookRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateWebhook
    */
    readonly projectId: string
    
    /**
    * Webhook unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateWebhook
    */
    readonly webhookId: string
    
} & ProjectsUpdateWebhookRequest

/**
 * Request parameters for updateWebhookSignature operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateWebhookSignatureRequest
 */
export type ProjectsApiUpdateWebhookSignatureRequest = {
    
    /**
    * Project unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateWebhookSignature
    */
    readonly projectId: string
    
    /**
    * Webhook unique ID.
    * @type {string}
    * @memberof ProjectsApiUpdateWebhookSignature
    */
    readonly webhookId: string
    
}

/**
 * ProjectsApiGenerated - object-oriented interface
 * @export
 * @class ProjectsApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create key
     * @param {ProjectsApiCreateKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public createKey(requestParameters: ProjectsApiCreateKeyRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create project
     * @param {ProjectsApiCreateNewProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public createNewProject(requestParameters: ProjectsApiCreateNewProjectRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createNewProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create platform
     * @param {ProjectsApiCreatePlatformRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public createPlatform(requestParameters: ProjectsApiCreatePlatformRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createPlatform(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create SMTP test
     * @param {ProjectsApiCreateSmtpTestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public createSmtpTest(requestParameters: ProjectsApiCreateSmtpTestRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createSmtpTest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create webhook
     * @param {ProjectsApiCreateWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public createWebhook(requestParameters: ProjectsApiCreateWebhookRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete key
     * @param {ProjectsApiDeleteKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public deleteKey(requestParameters: ProjectsApiDeleteKeyRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete platform
     * @param {ProjectsApiDeletePlatformRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public deletePlatform(requestParameters: ProjectsApiDeletePlatformRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deletePlatform(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete webhook
     * @param {ProjectsApiDeleteWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public deleteWebhook(requestParameters: ProjectsApiDeleteWebhookRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable or disable checking user passwords for similarity with their personal data.
     * @param {ProjectsApiEnablePersonalDataCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public enablePersonalDataCheck(requestParameters: ProjectsApiEnablePersonalDataCheckRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).enablePersonalDataCheck(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project
     * @param {ProjectsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public get(requestParameters: ProjectsApiGetRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get custom email template
     * @param {ProjectsApiGetEmailTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getEmailTemplate(requestParameters: ProjectsApiGetEmailTemplateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getEmailTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get key
     * @param {ProjectsApiGetKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getKey(requestParameters: ProjectsApiGetKeyRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get platform
     * @param {ProjectsApiGetPlatformByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getPlatformById(requestParameters: ProjectsApiGetPlatformByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getPlatformById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get custom SMS template
     * @param {ProjectsApiGetSmsTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getSmsTemplate(requestParameters: ProjectsApiGetSmsTemplateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getSmsTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get webhook
     * @param {ProjectsApiGetWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getWebhook(requestParameters: ProjectsApiGetWebhookRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List keys
     * @param {ProjectsApiListKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public listKeys(requestParameters: ProjectsApiListKeysRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).listKeys(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List platforms
     * @param {ProjectsApiListPlatformsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public listPlatforms(requestParameters: ProjectsApiListPlatformsRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).listPlatforms(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List projects
     * @param {ProjectsApiListProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public listProjects(requestParameters: ProjectsApiListProjectsRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).listProjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List webhooks
     * @param {ProjectsApiListWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public listWebhooks(requestParameters: ProjectsApiListWebhooksRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).listWebhooks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete project
     * @param {ProjectsApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public removeById(requestParameters: ProjectsApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset custom email template
     * @param {ProjectsApiResetEmailTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public resetEmailTemplate(requestParameters: ProjectsApiResetEmailTemplateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).resetEmailTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset custom SMS template
     * @param {ProjectsApiResetSmsTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public resetSmsTemplate(requestParameters: ProjectsApiResetSmsTemplateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).resetSmsTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update all API status
     * @param {ProjectsApiUpdateAllApiStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateAllApiStatus(requestParameters: ProjectsApiUpdateAllApiStatusRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateAllApiStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update all service status
     * @param {ProjectsApiUpdateAllServiceStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateAllServiceStatus(requestParameters: ProjectsApiUpdateAllServiceStatusRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateAllServiceStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update API status
     * @param {ProjectsApiUpdateApiStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateApiStatus(requestParameters: ProjectsApiUpdateApiStatusRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateApiStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update project authentication duration
     * @param {ProjectsApiUpdateAuthDurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateAuthDuration(requestParameters: ProjectsApiUpdateAuthDurationRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateAuthDuration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update project auth method status. Use this endpoint to enable or disable a given auth method for this project.
     * @param {ProjectsApiUpdateAuthMethodStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateAuthMethodStatus(requestParameters: ProjectsApiUpdateAuthMethodStatusRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateAuthMethodStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update authentication password dictionary status. Use this endpoint to enable or disable the dicitonary check for user password
     * @param {ProjectsApiUpdateAuthPasswordDictionaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateAuthPasswordDictionary(requestParameters: ProjectsApiUpdateAuthPasswordDictionaryRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateAuthPasswordDictionary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update authentication password history. Use this endpoint to set the number of password history to save and 0 to disable password history.
     * @param {ProjectsApiUpdateAuthPasswordHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateAuthPasswordHistory(requestParameters: ProjectsApiUpdateAuthPasswordHistoryRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateAuthPasswordHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update custom email templates
     * @param {ProjectsApiUpdateCustomEmailTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateCustomEmailTemplates(requestParameters: ProjectsApiUpdateCustomEmailTemplatesRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateCustomEmailTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update project
     * @param {ProjectsApiUpdateDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateDetail(requestParameters: ProjectsApiUpdateDetailRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update key
     * @param {ProjectsApiUpdateKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateKey(requestParameters: ProjectsApiUpdateKeyRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update project user sessions limit
     * @param {ProjectsApiUpdateMaxSessionsLimitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateMaxSessionsLimit(requestParameters: ProjectsApiUpdateMaxSessionsLimitRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateMaxSessionsLimit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update project OAuth2
     * @param {ProjectsApiUpdateOAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateOAuth(requestParameters: ProjectsApiUpdateOAuthRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateOAuth(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update platform
     * @param {ProjectsApiUpdatePlatformByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updatePlatformById(requestParameters: ProjectsApiUpdatePlatformByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updatePlatformById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update service status
     * @param {ProjectsApiUpdateServiceStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateServiceStatus(requestParameters: ProjectsApiUpdateServiceStatusRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateServiceStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update custom SMS template
     * @param {ProjectsApiUpdateSmsTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateSmsTemplate(requestParameters: ProjectsApiUpdateSmsTemplateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateSmsTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update SMTP
     * @param {ProjectsApiUpdateSmtpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateSmtp(requestParameters: ProjectsApiUpdateSmtpRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateSmtp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Project Team
     * @param {ProjectsApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateTeam(requestParameters: ProjectsApiUpdateTeamRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update project users limit
     * @param {ProjectsApiUpdateUserLimitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateUserLimit(requestParameters: ProjectsApiUpdateUserLimitRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateUserLimit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update webhook
     * @param {ProjectsApiUpdateWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateWebhook(requestParameters: ProjectsApiUpdateWebhookRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update webhook signature key
     * @param {ProjectsApiUpdateWebhookSignatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateWebhookSignature(requestParameters: ProjectsApiUpdateWebhookSignatureRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateWebhookSignature(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
