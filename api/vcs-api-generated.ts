/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BranchList } from '../models';
// @ts-ignore
import { Detection } from '../models';
// @ts-ignore
import { Installation } from '../models';
// @ts-ignore
import { InstallationList } from '../models';
// @ts-ignore
import { ProviderRepository } from '../models';
// @ts-ignore
import { ProviderRepositoryList } from '../models';
// @ts-ignore
import { VcsAuthorizeExternalDeploymentRequest } from '../models';
// @ts-ignore
import { VcsCreateProviderRepositoryRequest } from '../models';
// @ts-ignore
import { VcsDetectRuntimeSettingsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VcsApi - axios parameter creator
 * @export
 */
export const VcsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authorize external deployment
         * @param {string} installationId Installation Id
         * @param {string} repositoryId VCS Repository Id
         * @param {VcsAuthorizeExternalDeploymentRequest} [vcsAuthorizeExternalDeploymentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeExternalDeployment: async (installationId: string, repositoryId: string, vcsAuthorizeExternalDeploymentRequest?: VcsAuthorizeExternalDeploymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installationId' is not null or undefined
            assertParamExists('authorizeExternalDeployment', 'installationId', installationId)
            // verify required parameter 'repositoryId' is not null or undefined
            assertParamExists('authorizeExternalDeployment', 'repositoryId', repositoryId)
            const localVarPath = `/vcs/github/installations/{installationId}/repositories/{repositoryId}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId !== undefined ? installationId : `-installationId-`)))
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId !== undefined ? repositoryId : `-repositoryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vcsAuthorizeExternalDeploymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/github/installations/{installationId}/repositories/{repositoryId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vcsAuthorizeExternalDeploymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create repository
         * @param {string} installationId Installation Id
         * @param {VcsCreateProviderRepositoryRequest} [vcsCreateProviderRepositoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProviderRepository: async (installationId: string, vcsCreateProviderRepositoryRequest?: VcsCreateProviderRepositoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installationId' is not null or undefined
            assertParamExists('createProviderRepository', 'installationId', installationId)
            const localVarPath = `/vcs/github/installations/{installationId}/providerRepositories`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId !== undefined ? installationId : `-installationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vcsCreateProviderRepositoryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/github/installations/{installationId}/providerRepositories',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vcsCreateProviderRepositoryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Installation
         * @param {string} installationId Installation Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstallation: async (installationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installationId' is not null or undefined
            assertParamExists('deleteInstallation', 'installationId', installationId)
            const localVarPath = `/vcs/installations/{installationId}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId !== undefined ? installationId : `-installationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/installations/{installationId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Detect runtime settings from source code
         * @param {string} installationId Installation Id
         * @param {string} providerRepositoryId Repository Id
         * @param {VcsDetectRuntimeSettingsRequest} [vcsDetectRuntimeSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detectRuntimeSettings: async (installationId: string, providerRepositoryId: string, vcsDetectRuntimeSettingsRequest?: VcsDetectRuntimeSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installationId' is not null or undefined
            assertParamExists('detectRuntimeSettings', 'installationId', installationId)
            // verify required parameter 'providerRepositoryId' is not null or undefined
            assertParamExists('detectRuntimeSettings', 'providerRepositoryId', providerRepositoryId)
            const localVarPath = `/vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}/detection`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId !== undefined ? installationId : `-installationId-`)))
                .replace(`{${"providerRepositoryId"}}`, encodeURIComponent(String(providerRepositoryId !== undefined ? providerRepositoryId : `-providerRepositoryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vcsDetectRuntimeSettingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}/detection',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vcsDetectRuntimeSettingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get installation
         * @param {string} installationId Installation Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallationById: async (installationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installationId' is not null or undefined
            assertParamExists('getInstallationById', 'installationId', installationId)
            const localVarPath = `/vcs/installations/{installationId}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId !== undefined ? installationId : `-installationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/installations/{installationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get repository
         * @param {string} installationId Installation Id
         * @param {string} providerRepositoryId Repository Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository: async (installationId: string, providerRepositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installationId' is not null or undefined
            assertParamExists('getRepository', 'installationId', installationId)
            // verify required parameter 'providerRepositoryId' is not null or undefined
            assertParamExists('getRepository', 'providerRepositoryId', providerRepositoryId)
            const localVarPath = `/vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId !== undefined ? installationId : `-installationId-`)))
                .replace(`{${"providerRepositoryId"}}`, encodeURIComponent(String(providerRepositoryId !== undefined ? providerRepositoryId : `-providerRepositoryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List installations
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: provider, organization
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstallations: async (queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vcs/installations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/installations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Repositories
         * @param {string} installationId Installation Id
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProviderRepositories: async (installationId: string, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installationId' is not null or undefined
            assertParamExists('listProviderRepositories', 'installationId', installationId)
            const localVarPath = `/vcs/github/installations/{installationId}/providerRepositories`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId !== undefined ? installationId : `-installationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/github/installations/{installationId}/providerRepositories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Repository Branches
         * @param {string} installationId Installation Id
         * @param {string} providerRepositoryId Repository Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositoryBranches: async (installationId: string, providerRepositoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installationId' is not null or undefined
            assertParamExists('listRepositoryBranches', 'installationId', installationId)
            // verify required parameter 'providerRepositoryId' is not null or undefined
            assertParamExists('listRepositoryBranches', 'providerRepositoryId', providerRepositoryId)
            const localVarPath = `/vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}/branches`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId !== undefined ? installationId : `-installationId-`)))
                .replace(`{${"providerRepositoryId"}}`, encodeURIComponent(String(providerRepositoryId !== undefined ? providerRepositoryId : `-providerRepositoryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}/branches',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VcsApi - functional programming interface
 * @export
 */
export const VcsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VcsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authorize external deployment
         * @param {VcsApiAuthorizeExternalDeploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizeExternalDeployment(requestParameters: VcsApiAuthorizeExternalDeploymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const vcsAuthorizeExternalDeploymentRequest: VcsAuthorizeExternalDeploymentRequest = {
                providerPullRequestId: requestParameters.providerPullRequestId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizeExternalDeployment(requestParameters.installationId, requestParameters.repositoryId, vcsAuthorizeExternalDeploymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create repository
         * @param {VcsApiCreateProviderRepositoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProviderRepository(requestParameters: VcsApiCreateProviderRepositoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderRepository>> {
            const vcsCreateProviderRepositoryRequest: VcsCreateProviderRepositoryRequest = {
                name: requestParameters.name,
                private: requestParameters.private
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProviderRepository(requestParameters.installationId, vcsCreateProviderRepositoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Installation
         * @param {VcsApiDeleteInstallationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInstallation(requestParameters: VcsApiDeleteInstallationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInstallation(requestParameters.installationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Detect runtime settings from source code
         * @param {VcsApiDetectRuntimeSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detectRuntimeSettings(requestParameters: VcsApiDetectRuntimeSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Detection>> {
            const vcsDetectRuntimeSettingsRequest: VcsDetectRuntimeSettingsRequest = {
                providerRootDirectory: requestParameters.providerRootDirectory
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.detectRuntimeSettings(requestParameters.installationId, requestParameters.providerRepositoryId, vcsDetectRuntimeSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get installation
         * @param {VcsApiGetInstallationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstallationById(requestParameters: VcsApiGetInstallationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Installation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstallationById(requestParameters.installationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get repository
         * @param {VcsApiGetRepositoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRepository(requestParameters: VcsApiGetRepositoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderRepository>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRepository(requestParameters.installationId, requestParameters.providerRepositoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List installations
         * @param {VcsApiListInstallationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInstallations(requestParameters: VcsApiListInstallationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInstallations(requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Repositories
         * @param {VcsApiListProviderRepositoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProviderRepositories(requestParameters: VcsApiListProviderRepositoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderRepositoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProviderRepositories(requestParameters.installationId, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Repository Branches
         * @param {VcsApiListRepositoryBranchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRepositoryBranches(requestParameters: VcsApiListRepositoryBranchesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRepositoryBranches(requestParameters.installationId, requestParameters.providerRepositoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VcsApi - factory interface
 * @export
 */
export const VcsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VcsApiFp(configuration)
    return {
        /**
         * 
         * @summary Authorize external deployment
         * @param {VcsApiAuthorizeExternalDeploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeExternalDeployment(requestParameters: VcsApiAuthorizeExternalDeploymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authorizeExternalDeployment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create repository
         * @param {VcsApiCreateProviderRepositoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProviderRepository(requestParameters: VcsApiCreateProviderRepositoryRequest, options?: AxiosRequestConfig): AxiosPromise<ProviderRepository> {
            return localVarFp.createProviderRepository(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Installation
         * @param {VcsApiDeleteInstallationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstallation(requestParameters: VcsApiDeleteInstallationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteInstallation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Detect runtime settings from source code
         * @param {VcsApiDetectRuntimeSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detectRuntimeSettings(requestParameters: VcsApiDetectRuntimeSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Detection> {
            return localVarFp.detectRuntimeSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get installation
         * @param {VcsApiGetInstallationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstallationById(requestParameters: VcsApiGetInstallationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Installation> {
            return localVarFp.getInstallationById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get repository
         * @param {VcsApiGetRepositoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository(requestParameters: VcsApiGetRepositoryRequest, options?: AxiosRequestConfig): AxiosPromise<ProviderRepository> {
            return localVarFp.getRepository(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List installations
         * @param {VcsApiListInstallationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstallations(requestParameters: VcsApiListInstallationsRequest, options?: AxiosRequestConfig): AxiosPromise<InstallationList> {
            return localVarFp.listInstallations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Repositories
         * @param {VcsApiListProviderRepositoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProviderRepositories(requestParameters: VcsApiListProviderRepositoriesRequest, options?: AxiosRequestConfig): AxiosPromise<ProviderRepositoryList> {
            return localVarFp.listProviderRepositories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Repository Branches
         * @param {VcsApiListRepositoryBranchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositoryBranches(requestParameters: VcsApiListRepositoryBranchesRequest, options?: AxiosRequestConfig): AxiosPromise<BranchList> {
            return localVarFp.listRepositoryBranches(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authorizeExternalDeployment operation in VcsApi.
 * @export
 * @interface VcsApiAuthorizeExternalDeploymentRequest
 */
export type VcsApiAuthorizeExternalDeploymentRequest = {
    
    /**
    * Installation Id
    * @type {string}
    * @memberof VcsApiAuthorizeExternalDeployment
    */
    readonly installationId: string
    
    /**
    * VCS Repository Id
    * @type {string}
    * @memberof VcsApiAuthorizeExternalDeployment
    */
    readonly repositoryId: string
    
} & VcsAuthorizeExternalDeploymentRequest

/**
 * Request parameters for createProviderRepository operation in VcsApi.
 * @export
 * @interface VcsApiCreateProviderRepositoryRequest
 */
export type VcsApiCreateProviderRepositoryRequest = {
    
    /**
    * Installation Id
    * @type {string}
    * @memberof VcsApiCreateProviderRepository
    */
    readonly installationId: string
    
} & VcsCreateProviderRepositoryRequest

/**
 * Request parameters for deleteInstallation operation in VcsApi.
 * @export
 * @interface VcsApiDeleteInstallationRequest
 */
export type VcsApiDeleteInstallationRequest = {
    
    /**
    * Installation Id
    * @type {string}
    * @memberof VcsApiDeleteInstallation
    */
    readonly installationId: string
    
}

/**
 * Request parameters for detectRuntimeSettings operation in VcsApi.
 * @export
 * @interface VcsApiDetectRuntimeSettingsRequest
 */
export type VcsApiDetectRuntimeSettingsRequest = {
    
    /**
    * Installation Id
    * @type {string}
    * @memberof VcsApiDetectRuntimeSettings
    */
    readonly installationId: string
    
    /**
    * Repository Id
    * @type {string}
    * @memberof VcsApiDetectRuntimeSettings
    */
    readonly providerRepositoryId: string
    
} & VcsDetectRuntimeSettingsRequest

/**
 * Request parameters for getInstallationById operation in VcsApi.
 * @export
 * @interface VcsApiGetInstallationByIdRequest
 */
export type VcsApiGetInstallationByIdRequest = {
    
    /**
    * Installation Id
    * @type {string}
    * @memberof VcsApiGetInstallationById
    */
    readonly installationId: string
    
}

/**
 * Request parameters for getRepository operation in VcsApi.
 * @export
 * @interface VcsApiGetRepositoryRequest
 */
export type VcsApiGetRepositoryRequest = {
    
    /**
    * Installation Id
    * @type {string}
    * @memberof VcsApiGetRepository
    */
    readonly installationId: string
    
    /**
    * Repository Id
    * @type {string}
    * @memberof VcsApiGetRepository
    */
    readonly providerRepositoryId: string
    
}

/**
 * Request parameters for listInstallations operation in VcsApi.
 * @export
 * @interface VcsApiListInstallationsRequest
 */
export type VcsApiListInstallationsRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: provider, organization
    * @type {Array<string>}
    * @memberof VcsApiListInstallations
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof VcsApiListInstallations
    */
    readonly search?: string
    
}

/**
 * Request parameters for listProviderRepositories operation in VcsApi.
 * @export
 * @interface VcsApiListProviderRepositoriesRequest
 */
export type VcsApiListProviderRepositoriesRequest = {
    
    /**
    * Installation Id
    * @type {string}
    * @memberof VcsApiListProviderRepositories
    */
    readonly installationId: string
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof VcsApiListProviderRepositories
    */
    readonly search?: string
    
}

/**
 * Request parameters for listRepositoryBranches operation in VcsApi.
 * @export
 * @interface VcsApiListRepositoryBranchesRequest
 */
export type VcsApiListRepositoryBranchesRequest = {
    
    /**
    * Installation Id
    * @type {string}
    * @memberof VcsApiListRepositoryBranches
    */
    readonly installationId: string
    
    /**
    * Repository Id
    * @type {string}
    * @memberof VcsApiListRepositoryBranches
    */
    readonly providerRepositoryId: string
    
}

/**
 * VcsApiGenerated - object-oriented interface
 * @export
 * @class VcsApiGenerated
 * @extends {BaseAPI}
 */
export class VcsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Authorize external deployment
     * @param {VcsApiAuthorizeExternalDeploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public authorizeExternalDeployment(requestParameters: VcsApiAuthorizeExternalDeploymentRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).authorizeExternalDeployment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create repository
     * @param {VcsApiCreateProviderRepositoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public createProviderRepository(requestParameters: VcsApiCreateProviderRepositoryRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).createProviderRepository(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Installation
     * @param {VcsApiDeleteInstallationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public deleteInstallation(requestParameters: VcsApiDeleteInstallationRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).deleteInstallation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Detect runtime settings from source code
     * @param {VcsApiDetectRuntimeSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public detectRuntimeSettings(requestParameters: VcsApiDetectRuntimeSettingsRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).detectRuntimeSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get installation
     * @param {VcsApiGetInstallationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public getInstallationById(requestParameters: VcsApiGetInstallationByIdRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).getInstallationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get repository
     * @param {VcsApiGetRepositoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public getRepository(requestParameters: VcsApiGetRepositoryRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).getRepository(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List installations
     * @param {VcsApiListInstallationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public listInstallations(requestParameters: VcsApiListInstallationsRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).listInstallations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Repositories
     * @param {VcsApiListProviderRepositoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public listProviderRepositories(requestParameters: VcsApiListProviderRepositoriesRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).listProviderRepositories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Repository Branches
     * @param {VcsApiListRepositoryBranchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcsApiGenerated
     */
    public listRepositoryBranches(requestParameters: VcsApiListRepositoryBranchesRequest, options?: AxiosRequestConfig) {
        return VcsApiFp(this.configuration).listRepositoryBranches(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
