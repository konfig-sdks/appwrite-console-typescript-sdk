/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { Metric } from './metric';

/**
 * UsageFunctions
 * @export
 * @interface UsageFunctions
 */
export interface UsageFunctions {
    /**
     * Time range of the usage stats.
     * @type {string}
     * @memberof UsageFunctions
     */
    'range': string;
    /**
     * Total aggregated number of functions.
     * @type {number}
     * @memberof UsageFunctions
     */
    'functionsTotal': number;
    /**
     * Total aggregated number of functions deployments.
     * @type {number}
     * @memberof UsageFunctions
     */
    'deploymentsTotal': number;
    /**
     * Total aggregated sum of functions deployment storage.
     * @type {number}
     * @memberof UsageFunctions
     */
    'deploymentsStorageTotal': number;
    /**
     * Total aggregated number of functions build.
     * @type {number}
     * @memberof UsageFunctions
     */
    'buildsTotal': number;
    /**
     * total aggregated sum of functions build storage.
     * @type {number}
     * @memberof UsageFunctions
     */
    'buildsStorageTotal': number;
    /**
     * Total aggregated sum of functions build compute time.
     * @type {number}
     * @memberof UsageFunctions
     */
    'buildsTimeTotal': number;
    /**
     * Total  aggregated number of functions execution.
     * @type {number}
     * @memberof UsageFunctions
     */
    'executionsTotal': number;
    /**
     * Total aggregated sum of functions  execution compute time.
     * @type {number}
     * @memberof UsageFunctions
     */
    'executionsTimeTotal': number;
    /**
     * Aggregated number of functions per period.
     * @type {Array<Metric>}
     * @memberof UsageFunctions
     */
    'functions': Array<Metric>;
    /**
     * Aggregated number of functions deployment per period.
     * @type {Array<Metric>}
     * @memberof UsageFunctions
     */
    'deployments': Array<Metric>;
    /**
     * Aggregated number of  functions deployment storage per period.
     * @type {Array<Metric>}
     * @memberof UsageFunctions
     */
    'deploymentsStorage': Array<Metric>;
    /**
     * Aggregated number of functions build per period.
     * @type {Array<Metric>}
     * @memberof UsageFunctions
     */
    'builds': Array<Metric>;
    /**
     * Aggregated sum of functions build storage per period.
     * @type {Array<Metric>}
     * @memberof UsageFunctions
     */
    'buildsStorage': Array<Metric>;
    /**
     * Aggregated sum of  functions build compute time per period.
     * @type {Array<Metric>}
     * @memberof UsageFunctions
     */
    'buildsTime': Array<Metric>;
    /**
     * Aggregated number of  functions execution per period.
     * @type {Array<Metric>}
     * @memberof UsageFunctions
     */
    'executions': Array<Metric>;
    /**
     * Aggregated number of functions execution compute time per period.
     * @type {Array<Metric>}
     * @memberof UsageFunctions
     */
    'executionsTime': Array<Metric>;
}

