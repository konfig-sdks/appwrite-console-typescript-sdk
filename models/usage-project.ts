/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { Metric } from './metric';
import { MetricBreakdown } from './metric-breakdown';

/**
 * UsageProject
 * @export
 * @interface UsageProject
 */
export interface UsageProject {
    /**
     * Total aggregated number of function executions.
     * @type {number}
     * @memberof UsageProject
     */
    'executionsTotal': number;
    /**
     * Total aggregated  number of documents.
     * @type {number}
     * @memberof UsageProject
     */
    'documentsTotal': number;
    /**
     * Total aggregated number of databases.
     * @type {number}
     * @memberof UsageProject
     */
    'databasesTotal': number;
    /**
     * Total aggregated number of users.
     * @type {number}
     * @memberof UsageProject
     */
    'usersTotal': number;
    /**
     * Total aggregated sum of files storage size (in bytes).
     * @type {number}
     * @memberof UsageProject
     */
    'filesStorageTotal': number;
    /**
     * Total aggregated number of buckets.
     * @type {number}
     * @memberof UsageProject
     */
    'bucketsTotal': number;
    /**
     * Aggregated  number of requests per period.
     * @type {Array<Metric>}
     * @memberof UsageProject
     */
    'requests': Array<Metric>;
    /**
     * Aggregated number of consumed bandwidth per period.
     * @type {Array<Metric>}
     * @memberof UsageProject
     */
    'network': Array<Metric>;
    /**
     * Aggregated number of users per period.
     * @type {Array<Metric>}
     * @memberof UsageProject
     */
    'users': Array<Metric>;
    /**
     * Aggregated number of executions per period.
     * @type {Array<Metric>}
     * @memberof UsageProject
     */
    'executions': Array<Metric>;
    /**
     * Aggregated breakdown in totals of executions by functions.
     * @type {Array<MetricBreakdown>}
     * @memberof UsageProject
     */
    'executionsBreakdown': Array<MetricBreakdown>;
    /**
     * Aggregated breakdown in totals of usage by buckets.
     * @type {Array<MetricBreakdown>}
     * @memberof UsageProject
     */
    'bucketsBreakdown': Array<MetricBreakdown>;
}

